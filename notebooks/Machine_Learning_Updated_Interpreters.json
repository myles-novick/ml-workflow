{"paragraphs":[{"text":"%angular\n<style>\n#s {\n}\nh1, h2, h3, h4, h5, h6, table, button, a, p, blockquote {\nfont-family:Geneva;\n}\n\n.log {\ntransition: all .2s ease-in-out;\n}\n\n.log:hover {\ntransform: scale(1.1);\n}\n</style>\n<div id='s' style='width:100%'>\n<center><img class='log' src='https://www.splicemachine.com/wp-content/themes/SpliceMachine/nhimages/splice-logo.png' width='20%' style='z-index:5'></center>\n<center><h1 class='log' style='font-size:70px; color:black;'>Welcome to Splice Machine ML</h1></center>\n<center><h2 class = 'log' style='font-size:40px; color:grey;'>The data platform for intelligent applications</center>\n<center><img class='log' style='width:300px' src=\"https://image.ibb.co/nrEcYd/iphone.png\"></center>\n</div>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"text","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<style>\n#s {\n}\nh1, h2, h3, h4, h5, h6, table, button, a, p, blockquote {\nfont-family:Geneva;\n}\n\n.log {\ntransition: all .2s ease-in-out;\n}\n\n.log:hover {\ntransform: scale(1.1);\n}\n</style>\n<div id='s' style='width:100%'>\n<center><img class='log' src='https://www.splicemachine.com/wp-content/themes/SpliceMachine/nhimages/splice-logo.png' width='20%' style='z-index:5'></center>\n<center><h1 class='log' style='font-size:70px; color:black;'>Welcome to Splice Machine ML</h1></center>\n<center><h2 class = 'log' style='font-size:40px; color:grey;'>The data platform for intelligent applications</center>\n<center><img class='log' style='width:300px' src=\"https://image.ibb.co/nrEcYd/iphone.png\"></center>\n</div>"}]},"apps":[],"jobName":"paragraph_1539663694248_-991155598","id":"20180720-203350_244348734","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:168"},{"text":"%angular\n<hr>\n<h2 style='font-size:40px;  font-weight:bold'>What is machine learning?</h1>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"text","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<hr>\n<h2 style='font-size:40px;  font-weight:bold'>What is machine learning?</h1>"}]},"apps":[],"jobName":"paragraph_1539663694257_776423619","id":"20180720-232105_727755990","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:169"},{"text":"%md\n<img width=\"100%\" height='500px' src=\"https://whukr3tbt6vbd0bq1rat9wn2-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/Untitled-design-18.png\" data-lazy-type=\"image\" data-src=\"https://whukr3tbt6vbd0bq1rat9wn2-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/Untitled-design-18.png\" class=\"attachment-cb-759-500 size-cb-759-500 wp-post-image lazy-loaded\" alt=\"What is Machine Learning? 1\" srcset=\"https://whukr3tbt6vbd0bq1rat9wn2-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/Untitled-design-18.png 851w, https://whukr3tbt6vbd0bq1rat9wn2-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/Untitled-design-18-250x93.png 250w, https://whukr3tbt6vbd0bq1rat9wn2-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/Untitled-design-18-400x148.png 400w, https://whukr3tbt6vbd0bq1rat9wn2-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/Untitled-design-18-768x284.png 768w\" data-srcset=\"\" sizes=\"(max-width: 851px) 100vw, 851px\">","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":6,"editorMode":"ace/mode/markdown","editorHide":true,"fontSize":9,"results":{"0":{"graph":{"mode":"table","height":123.344,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<img width=\"100%\" height='500px' src=\"https://whukr3tbt6vbd0bq1rat9wn2-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/Untitled-design-18.png\" data-lazy-type=\"image\" data-src=\"https://whukr3tbt6vbd0bq1rat9wn2-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/Untitled-design-18.png\" class=\"attachment-cb-759-500 size-cb-759-500 wp-post-image lazy-loaded\" alt=\"What is Machine Learning? 1\" srcset=\"https://whukr3tbt6vbd0bq1rat9wn2-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/Untitled-design-18.png 851w, https://whukr3tbt6vbd0bq1rat9wn2-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/Untitled-design-18-250x93.png 250w, https://whukr3tbt6vbd0bq1rat9wn2-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/Untitled-design-18-400x148.png 400w, https://whukr3tbt6vbd0bq1rat9wn2-wpengine.netdna-ssl.com/wp-content/uploads/2016/09/Untitled-design-18-768x284.png 768w\" data-srcset=\"\" sizes=\"(max-width: 851px) 100vw, 851px\">\n</div>"}]},"apps":[],"jobName":"paragraph_1539663694258_2144585363","id":"20180720-232136_1433360674","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:170"},{"text":"%angular\n<style>\nblockquote {\n  background: #f9f9f9;\n  border-left: 10px solid #ccc;\n  margin: 1.5em 10px;\n  padding: 2em;\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n}\nblockquote:before {\n  color: #ccc;\n  content: open-quote;\n  font-size: 4em;\n  line-height: 0.1em;\n  margin-right: 0.25em;\n  vertical-align: -0.4em;\n}\nblockquote p {\n  display: inline;\n  font-size:18px;\n}\n</style>\n<blockquote><p>Machine Learning is the science of getting computers to learn and act like humans do, and improve their learning over time in autonomous fashion, by feeding them data and information in the form of observations and real-world interactions. Through a decision function, or a model, computers can learn relationships in data that we never had the ability to see or utilize in the past</p></blockquote>\n&nbsp;&nbsp;<a href='https://www.techemergence.com/what-is-machine-learning/'><button class='btn btn-primary'>Read More About Machine Learning</button></a>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"text","editOnDblClick":true},"colWidth":6,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<style>\nblockquote {\n  background: #f9f9f9;\n  border-left: 10px solid #ccc;\n  margin: 1.5em 10px;\n  padding: 2em;\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n}\nblockquote:before {\n  color: #ccc;\n  content: open-quote;\n  font-size: 4em;\n  line-height: 0.1em;\n  margin-right: 0.25em;\n  vertical-align: -0.4em;\n}\nblockquote p {\n  display: inline;\n  font-size:18px;\n}\n</style>\n<blockquote><p>Machine Learning is the science of getting computers to learn and act like humans do, and improve their learning over time in autonomous fashion, by feeding them data and information in the form of observations and real-world interactions. Through a decision function, or a model, computers can learn relationships in data that we never had the ability to see or utilize in the past</p></blockquote>\n&nbsp;&nbsp;<a href='https://www.techemergence.com/what-is-machine-learning/'><button class='btn btn-primary'>Read More About Machine Learning</button></a>"}]},"apps":[],"jobName":"paragraph_1539663694258_1431893230","id":"20180720-232200_1635201617","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:171"},{"text":"%angular\n<style>\nblockquote{\n  font-size: 15px;\n  background: #f9f9f9;\n  border-left: 10px solid #ccc;\n  margin: .5em 10px;\n  padding: 30em, 10px;\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n  padding: 10px 20px;\n  line-height: 1.4;\n}\n\nblockquote:before {\n  content: open-quote;\n  display: inline;\n  height: 0;\n  line-height: 0;\n  left: -10px;\n  position: relative;\n  top: 30px;\n  bottom:30px;\n  color: #ccc;\n  font-size: 3em;\n    display:none;\n\n}\n\np{\n  margin: 0;\n}\n\nfooter{\n  margin:0;\n  text-align: right;\n  font-size: 1em;\n  font-style: italic;\n}\n</style>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Why use Splice Machine ML</span></b><br><br>Splice Machine ML isn't just a machine learning platform, it is much more than that. In fact, it is a complete machine learning lifecycle management solution, giving you total control of your models, from retrieving data to scalable deployment. Here are just a couple of advantages that we have over other platforms.<br><br><ol><li> Machine learning takes place on the incredibly powerful Apache Spark executors in your database, allowing you to complete massive jobs in parallel</li><li>When using the Splice Machine Python Package, the PySpliceContext, Spark will have direct access to your large amount of data, reducing time that would be spent transferring billions of rows over JDBC</li><li>An important part of data science is visualizing your data to find trends even before you feed it into an algorithm. Thanks to our handy Zeppelin notebooks, that can take place with one line of SQL code</li><li>After a data scientist has created a model, we need to tweak our model's parameters (preprocessing, hyperparameters, data source tc.), in the aim of coming up with the best model. However, there is no good way to keep track of all of these tiny changes. Our solution is a platform called MLFlow, which allows you to version runs and compare them to each other.<li>After you have found the best model for your task, you are ready to deploy it and use it in your applications. We allow you to push your MLFlow models up to scalable cloud computing services, such as AWS SageMaker and AzureML, to make predictions in real time.</li></ol><br>Feeling overwhelmed? Don't worry, we are going to guide you through this process.<br></p><footer>Your friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"text","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<style>\nblockquote{\n  font-size: 15px;\n  background: #f9f9f9;\n  border-left: 10px solid #ccc;\n  margin: .5em 10px;\n  padding: 30em, 10px;\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n  padding: 10px 20px;\n  line-height: 1.4;\n}\n\nblockquote:before {\n  content: open-quote;\n  display: inline;\n  height: 0;\n  line-height: 0;\n  left: -10px;\n  position: relative;\n  top: 30px;\n  bottom:30px;\n  color: #ccc;\n  font-size: 3em;\n    display:none;\n\n}\n\np{\n  margin: 0;\n}\n\nfooter{\n  margin:0;\n  text-align: right;\n  font-size: 1em;\n  font-style: italic;\n}\n</style>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Why use Splice Machine ML</span></b><br><br>Splice Machine ML isn't just a machine learning platform, it is much more than that. In fact, it is a complete machine learning lifecycle management solution, giving you total control of your models, from retrieving data to scalable deployment. Here are just a couple of advantages that we have over other platforms.<br><br><ol><li> Machine learning takes place on the incredibly powerful Apache Spark executors in your database, allowing you to complete massive jobs in parallel</li><li>When using the Splice Machine Python Package, the PySpliceContext, Spark will have direct access to your large amount of data, reducing time that would be spent transferring billions of rows over JDBC</li><li>An important part of data science is visualizing your data to find trends even before you feed it into an algorithm. Thanks to our handy Zeppelin notebooks, that can take place with one line of SQL code</li><li>After a data scientist has created a model, we need to tweak our model's parameters (preprocessing, hyperparameters, data source tc.), in the aim of coming up with the best model. However, there is no good way to keep track of all of these tiny changes. Our solution is a platform called MLFlow, which allows you to version runs and compare them to each other.<li>After you have found the best model for your task, you are ready to deploy it and use it in your applications. We allow you to push your MLFlow models up to scalable cloud computing services, such as AWS SageMaker and AzureML, to make predictions in real time.</li></ol><br>Feeling overwhelmed? Don't worry, we are going to guide you through this process.<br></p><footer>Your friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694259_-2087696529","id":"20180720-205455_2096190100","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:172"},{"text":"%angular\n<h2 style='font-size:40px;  font-weight:bold'>How does this work?</h1>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h2 style='font-size:40px;  font-weight:bold'>How does this work?</h1>"}]},"apps":[],"jobName":"paragraph_1539663694260_-798826474","id":"20180720-232457_941027624","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:173"},{"text":"%angular\n<style>\nblockquote{\n  font-size: 15px;\n  background: #f9f9f9;\n  border-left: 10px solid #ccc;\n  margin: .5em 10px;\n  padding: 30em, 10px;\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n  padding: 10px 20px;\n  line-height: 1.4;\n}\n\nblockquote:before {\n  content: open-quote;\n  display: inline;\n  height: 0;\n  line-height: 0;\n  left: -10px;\n  position: relative;\n  top: 30px;\n  bottom:30px;\n  color: #ccc;\n  font-size: 3em;\n    display:none;\n\n}\n\np{\n  margin: 0;\n}\n\nfooter{\n  margin:0;\n  text-align: right;\n  font-size: 1em;\n  font-style: italic;\n}\n</style>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Zeppelin</span></b><br><br>Zeppelin notebooks are a simple, easy and intuitive way to do data science, right in your browser. It is fast because any Spark computations you run inside of the notebook are executed right on your cluster's Spark executors.<br><br> As if speed wasn't enough, Zeppelin notebooks also make machine learning easier. By using Zeppelin intepreters, you can run different languages inside the same notebook. The language you want to run is signified by a % sign followed by an interpreter name at the top of a cell. For example, two of the interpreters you will become very familiar with while using our platform are the %pyspark and %splicemachine interpreters. In the %splicemachine interpreter, using a simple SQL SELECT query, you can easily generate beautiful graphs that show you trends in your data, even before you import it into pyspark.<br> <br><i>This entire demo was written inside a Zeppelin notebook</i></br><footer>-Your friends at Splice Machine</footer></blockquote><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>MLFlow</span></b><br><br>As a data scientist, you are constantly tweaking parameters, in the hopes of achieving the best possible model. The issue with that, is that it is very difficult to keep track of what you are changing-- even increasing a parameter by one can improve your model dramatically. MLFlow is a solution to this problem. <br><br> MLFlow has two main concepts: experiments and runs. Each time you run a model, MLFlow will generate a new run, which you can keep track of in the MLFlow tracking UI. The markers that you write in your code will be visible in the UI, so you can easily compare runs to each other. Because a new run is logged each time you create a model, <i><b>we highly reccomend that you only add markers after your model runs successfully.</b></i>.<br><br>You can think of experiments like folders for your models. For example, if you are an ecommerce company, you might have an experiment for predicting how late a shipment will be, and another for predicting which customer is the most likely to buy a certain item. <footer>-Your friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"text","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<style>\nblockquote{\n  font-size: 15px;\n  background: #f9f9f9;\n  border-left: 10px solid #ccc;\n  margin: .5em 10px;\n  padding: 30em, 10px;\n  quotes: \"\\201C\"\"\\201D\"\"\\2018\"\"\\2019\";\n  padding: 10px 20px;\n  line-height: 1.4;\n}\n\nblockquote:before {\n  content: open-quote;\n  display: inline;\n  height: 0;\n  line-height: 0;\n  left: -10px;\n  position: relative;\n  top: 30px;\n  bottom:30px;\n  color: #ccc;\n  font-size: 3em;\n    display:none;\n\n}\n\np{\n  margin: 0;\n}\n\nfooter{\n  margin:0;\n  text-align: right;\n  font-size: 1em;\n  font-style: italic;\n}\n</style>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Zeppelin</span></b><br><br>Zeppelin notebooks are a simple, easy and intuitive way to do data science, right in your browser. It is fast because any Spark computations you run inside of the notebook are executed right on your cluster's Spark executors.<br><br> As if speed wasn't enough, Zeppelin notebooks also make machine learning easier. By using Zeppelin intepreters, you can run different languages inside the same notebook. The language you want to run is signified by a % sign followed by an interpreter name at the top of a cell. For example, two of the interpreters you will become very familiar with while using our platform are the %pyspark and %splicemachine interpreters. In the %splicemachine interpreter, using a simple SQL SELECT query, you can easily generate beautiful graphs that show you trends in your data, even before you import it into pyspark.<br> <br><i>This entire demo was written inside a Zeppelin notebook</i></br><footer>-Your friends at Splice Machine</footer></blockquote><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>MLFlow</span></b><br><br>As a data scientist, you are constantly tweaking parameters, in the hopes of achieving the best possible model. The issue with that, is that it is very difficult to keep track of what you are changing-- even increasing a parameter by one can improve your model dramatically. MLFlow is a solution to this problem. <br><br> MLFlow has two main concepts: experiments and runs. Each time you run a model, MLFlow will generate a new run, which you can keep track of in the MLFlow tracking UI. The markers that you write in your code will be visible in the UI, so you can easily compare runs to each other. Because a new run is logged each time you create a model, <i><b>we highly reccomend that you only add markers after your model runs successfully.</b></i>.<br><br>You can think of experiments like folders for your models. For example, if you are an ecommerce company, you might have an experiment for predicting how late a shipment will be, and another for predicting which customer is the most likely to buy a certain item. <footer>-Your friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694261_531940080","id":"20180720-205700_1981811274","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:174"},{"text":"%angular\n<br><br>\n<center><h2 style='font-size:27px'>Have any questions or problems with this tutorial?</h2></center>\n<style>\n* {\n  box-sizing: border-box;\n}\n\nhtml {\n  font-size: 12pt;\n  background-color: #f1f3f5;\n}\n\n.banner {\n  display: flex;\n  background-color: white;\n  min-height: 256px;\n  border-radius: 4px;\n  box-shadow: 0 15px 35px rgba(50, 50, 93, 0.1), 0 5px 15px rgba(0, 0, 0, 0.07);\n  max-width: 960px;\n  margin: 0 auto;\n  overflow: hidden;\n}\n\n.banner figure {\n  margin: 0;\n  padding: 0;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  background-color: #525f7f;\n  background-size: cover;\n  background-color: rgba(0, 0, 0, 0.45);\n  background-blend-mode: multiply;\n  -webkit-clip-path: polygon(0 0, 100% 0, 88% 100%, 0 100%);\n          clip-path: polygon(0 0, 100% 0, 88% 100%, 0 100%);\n}\n\n.img {\n  padding: 0 25%;\n  width: 100%;\n  -webkit-transform: translateX(-6%);\n          transform: translateX(-6%);\n}\n\n.text2 {\n  display: flex;\n  align-items: center;\n  padding: 2rem 4rem 2rem 2rem;\n}\n\nh2,\np {\n  margin: 0;\n}\n\nh2 {\n  padding-bottom: 1.25rem;\n  line-height: 1.25;\n  letter-spacing: 0.05em;\n  font-size: 16pt;\n  color: #2f365f;\n}\n\np {\n  line-height: 1.5;\n  margin-bottom: 1.5rem;\n  color: #525f7f;\n}\n.botn {\n    border: 1px solid grey;\n    border-radius:3px;\n    width:150px;\n    height:30px;\n    color:black;\n}\n</style>\n<div class=\"banner\">\n  <figure style=\"background-image: url(https://assets.brandfolder.com/orgcu6-edcnnk-egeh9s/original/2727_019D.jpg)\">\n    <img class='img' src=\"https://splicetrial-amritpincare.splicemachine.io/assets/images/zepLogoW.png\" alt=\"\">\n  </figure>\n  <div class=\"text2\">\n    <div>\n      <h2>Join our community on <strong>Slack</strong></h2>\n      <p>We have a fantastic community of developers who will be happy to answer your questions\n      </p>\n      <div class=\"cta-bar\">\n        <a href='https://www.splicemachine.com/community/slack-channel-signup/'><button class='botn log'>Join our Slack</button></a>\n      </div>\n    </div>\n  </div>\n\n\n</div><br><br>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<br><br>\n<center><h2 style='font-size:27px'>Have any questions or problems with this tutorial?</h2></center>\n<style>\n* {\n  box-sizing: border-box;\n}\n\nhtml {\n  font-size: 12pt;\n  background-color: #f1f3f5;\n}\n\n.banner {\n  display: flex;\n  background-color: white;\n  min-height: 256px;\n  border-radius: 4px;\n  box-shadow: 0 15px 35px rgba(50, 50, 93, 0.1), 0 5px 15px rgba(0, 0, 0, 0.07);\n  max-width: 960px;\n  margin: 0 auto;\n  overflow: hidden;\n}\n\n.banner figure {\n  margin: 0;\n  padding: 0;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  background-color: #525f7f;\n  background-size: cover;\n  background-color: rgba(0, 0, 0, 0.45);\n  background-blend-mode: multiply;\n  -webkit-clip-path: polygon(0 0, 100% 0, 88% 100%, 0 100%);\n          clip-path: polygon(0 0, 100% 0, 88% 100%, 0 100%);\n}\n\n.img {\n  padding: 0 25%;\n  width: 100%;\n  -webkit-transform: translateX(-6%);\n          transform: translateX(-6%);\n}\n\n.text2 {\n  display: flex;\n  align-items: center;\n  padding: 2rem 4rem 2rem 2rem;\n}\n\nh2,\np {\n  margin: 0;\n}\n\nh2 {\n  padding-bottom: 1.25rem;\n  line-height: 1.25;\n  letter-spacing: 0.05em;\n  font-size: 16pt;\n  color: #2f365f;\n}\n\np {\n  line-height: 1.5;\n  margin-bottom: 1.5rem;\n  color: #525f7f;\n}\n.botn {\n    border: 1px solid grey;\n    border-radius:3px;\n    width:150px;\n    height:30px;\n    color:black;\n}\n</style>\n<div class=\"banner\">\n  <figure style=\"background-image: url(https://assets.brandfolder.com/orgcu6-edcnnk-egeh9s/original/2727_019D.jpg)\">\n    <img class='img' src=\"https://splicetrial-amritpincare.splicemachine.io/assets/images/zepLogoW.png\" alt=\"\">\n  </figure>\n  <div class=\"text2\">\n    <div>\n      <h2>Join our community on <strong>Slack</strong></h2>\n      <p>We have a fantastic community of developers who will be happy to answer your questions\n      </p>\n      <div class=\"cta-bar\">\n        <a href='https://www.splicemachine.com/community/slack-channel-signup/'><button class='botn log'>Join our Slack</button></a>\n      </div>\n    </div>\n  </div>\n\n\n</div><br><br>"}]},"apps":[],"jobName":"paragraph_1539663694261_-81532012","id":"20180721-010623_1892137492","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:175"},{"text":"%angular\n<br>\n<center><h1 style='font-size:46px;'>Ready? Let's get started<b style='font-size:50px'>.</b></h1></center>\n<br>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"text","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<br>\n<center><h1 style='font-size:46px;'>Ready? Let's get started<b style='font-size:50px'>.</b></h1></center>\n<br>"}]},"apps":[],"jobName":"paragraph_1539663694262_-2057060697","id":"20180720-232351_2131149745","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:176"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Visualizing Your Data</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Data Visualization</span></b><br><br>As we mentioned before, visualizing your data is an extremely important part of machine learning. We can do this in the Splice Machine interpreter via a simple SQL SELECT query. Looking at informative graphs of our features can often influence which features we decide to use in the final model<br><br><i>Helpful Hint: the Splice Machine interpreter can be accessed with %splicemachine. Also ${a=default value} creates an input field in the Splice Machine interpreter.</i> For this demo, we will use a breast cancer dataset which has already been imported into this cluster's Splice Machine Database.<footer>With &lt;3, Your Friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Visualizing Your Data</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Data Visualization</span></b><br><br>As we mentioned before, visualizing your data is an extremely important part of machine learning. We can do this in the Splice Machine interpreter via a simple SQL SELECT query. Looking at informative graphs of our features can often influence which features we decide to use in the final model<br><br><i>Helpful Hint: the Splice Machine interpreter can be accessed with %splicemachine. Also ${a=default value} creates an input field in the Splice Machine interpreter.</i> For this demo, we will use a breast cancer dataset which has already been imported into this cluster's Splice Machine Database.<footer>With &lt;3, Your Friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694263_1020310429","id":"20180720-235228_1378955021","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:177"},{"text":"%angular\n<h1 style='font-size:30px;'>Table View</h1>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:30px;'>Table View</h1>"}]},"apps":[],"jobName":"paragraph_1539663694263_-1393200183","id":"20180720-235738_270860710","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:178"},{"text":"%splicemachine\nSELECT * FROM ${1. TABLE NAME=DEMO.BREAST_CANCER} {LIMIT ${2. MAX RESULTS=50}};","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"MEAN_RADIUS":"string","MEAN_TEXTURE":"string","MEAN_PERIMETER":"string","MEAN_AREA":"string","MEAN_SMOOTHNESS":"string","MEAN_COMPACTNESS":"string","MEAN_CONCAVITY":"string","MEAN_CONCAVE_POINTS":"string","MEAN_SYMMETRY":"string","MEAN_FRACTAL_DIMENSION":"string","RADIUS_ERROR":"string","TEXTURE_ERROR":"string","PERIMETER_ERROR":"string","AREA_ERROR":"string","SMOOTHNESS_ERROR":"string","COMPACTNESS_ERROR":"string","CONCAVITY_ERROR":"string","CONCAVE_POINTS_ERROR":"string","SYMMETRY_ERROR":"string","FRACTAL_DIMENSION_ERROR":"string","WORST_RADIUS":"string","WORST_TEXTURE":"string","WORST_PERIMETER":"string","WORST_AREA":"string","WORST_SMOOTHNESS":"string","WORST_COMPACTNESS":"string","WORST_CONCAVITY":"string","WORST_CONCAVE_POINTS":"string","WORST_SYMMETRY":"string","WORST_FRACTAL_DIMENSION":"string","LABEL":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}}}},"enabled":true},"settings":{"params":{"1. TABLE NAME":"DEMO.BREAST_CANCER","2. MAX RESULTS":"10"},"forms":{"1. TABLE NAME":{"type":"TextBox","name":"1. TABLE NAME","defaultValue":"DEMO.BREAST_CANCER","hidden":false,"$$hashKey":"object:1271"},"2. MAX RESULTS":{"type":"TextBox","name":"2. MAX RESULTS","defaultValue":"50","hidden":false,"$$hashKey":"object:1272"}}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"MEAN_RADIUS\tMEAN_TEXTURE\tMEAN_PERIMETER\tMEAN_AREA\tMEAN_SMOOTHNESS\tMEAN_COMPACTNESS\tMEAN_CONCAVITY\tMEAN_CONCAVE_POINTS\tMEAN_SYMMETRY\tMEAN_FRACTAL_DIMENSION\tRADIUS_ERROR\tTEXTURE_ERROR\tPERIMETER_ERROR\tAREA_ERROR\tSMOOTHNESS_ERROR\tCOMPACTNESS_ERROR\tCONCAVITY_ERROR\tCONCAVE_POINTS_ERROR\tSYMMETRY_ERROR\tFRACTAL_DIMENSION_ERROR\tWORST_RADIUS\tWORST_TEXTURE\tWORST_PERIMETER\tWORST_AREA\tWORST_SMOOTHNESS\tWORST_COMPACTNESS\tWORST_CONCAVITY\tWORST_CONCAVE_POINTS\tWORST_SYMMETRY\tWORST_FRACTAL_DIMENSION\tLABEL\n12.45\t15.7\t82.57\t477.1\t0.1278\t0.17\t0.1578\t0.08089\t0.2087\t0.07613\t0.3345\t0.8902\t2.217\t27.19\t0.00751\t0.03345\t0.03672\t0.01137\t0.02165\t0.005082\t15.47\t23.75\t103.4\t741.6\t0.1791\t0.5249\t0.5355\t0.1741\t0.3985\t0.1244\t0\n9.504\t12.44\t60.34\t273.9\t0.1024\t0.06492\t0.02956\t0.02076\t0.1815\t0.06905\t0.2773\t0.9768\t1.909\t15.7\t0.009606\t0.01432\t0.01985\t0.01421\t0.02027\t0.002968\t10.23\t15.66\t65.13\t314.9\t0.1324\t0.1148\t0.08867\t0.06227\t0.245\t0.07773\t1\n13.03\t18.42\t82.61\t523.8\t0.08983\t0.03766\t0.02562\t0.02923\t0.1467\t0.05863\t0.1839\t2.342\t1.17\t14.16\t0.004352\t0.004899\t0.01343\t0.01164\t0.02671\t0.001777\t13.3\t22.81\t84.46\t545.9\t0.09701\t0.04619\t0.04833\t0.05013\t0.1987\t0.06169\t1\n18.22\t18.7\t120.3\t1033.0\t0.1148\t0.1485\t0.1772\t0.106\t0.2092\t0.0631\t0.8337\t1.593\t4.877\t98.81\t0.003899\t0.02961\t0.02817\t0.009222\t0.02674\t0.005126\t20.6\t24.13\t135.1\t1321.0\t0.128\t0.2297\t0.2623\t0.1325\t0.3021\t0.07987\t0\n12.78\t16.49\t81.37\t502.5\t0.09831\t0.05234\t0.03653\t0.02864\t0.159\t0.05653\t0.2368\t0.8732\t1.471\t18.33\t0.007962\t0.005612\t0.01585\t0.008662\t0.02254\t0.001906\t13.46\t19.76\t85.67\t554.9\t0.1296\t0.07061\t0.1039\t0.05882\t0.2383\t0.0641\t1\n18.46\t18.52\t121.1\t1075.0\t0.09874\t0.1053\t0.1335\t0.08795\t0.2132\t0.06022\t0.6997\t1.475\t4.782\t80.6\t0.006471\t0.01649\t0.02806\t0.0142\t0.0237\t0.003755\t22.93\t27.68\t152.2\t1603.0\t0.1398\t0.2089\t0.3157\t0.1642\t0.3695\t0.08579\t0\n6.981\t13.43\t43.79\t143.5\t0.117\t0.07568\t0.0\t0.0\t0.193\t0.07818\t0.2241\t1.508\t1.553\t9.833\t0.01019\t0.01084\t0.0\t0.0\t0.02659\t0.0041\t7.93\t19.54\t50.41\t185.2\t0.1584\t0.1202\t0.0\t0.0\t0.2932\t0.09382\t1\n14.87\t16.67\t98.64\t682.5\t0.1162\t0.1649\t0.169\t0.08923\t0.2157\t0.06768\t0.4266\t0.9489\t2.989\t41.18\t0.006985\t0.02563\t0.03011\t0.01271\t0.01602\t0.003884\t18.81\t27.37\t127.1\t1095.0\t0.1878\t0.448\t0.4704\t0.2027\t0.3585\t0.1065\t0\n15.71\t13.93\t102.0\t761.7\t0.09462\t0.09462\t0.07135\t0.05933\t0.1816\t0.05723\t0.3117\t0.8155\t1.972\t27.94\t0.005217\t0.01515\t0.01678\t0.01268\t0.01669\t0.00233\t17.5\t19.25\t114.3\t922.8\t0.1223\t0.1949\t0.1709\t0.1374\t0.2723\t0.07071\t1\n13.74\t17.91\t88.12\t585.0\t0.07944\t0.06376\t0.02881\t0.01329\t0.1473\t0.0558\t0.25\t0.7574\t1.573\t21.47\t0.002838\t0.01592\t0.0178\t0.005828\t0.01329\t0.001976\t15.34\t22.46\t97.19\t725.9\t0.09711\t0.1824\t0.1564\t0.06019\t0.235\t0.07014\t1\n"}]},"apps":[],"jobName":"paragraph_1539663694264_-1784410256","id":"20180720-235935_1260977477","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:179"},{"text":"%angular\n<h1 style='font-size:30px;'>Graph Views</h1>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:30px;'>Graph Views</h1>"}]},"apps":[],"jobName":"paragraph_1539663694264_679901128","id":"20180721-010147_1917084334","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:180"},{"text":"%angular\n<h2 style='font-size:18px'>Mean Radius vs Texture Error</h2>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":4,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h2 style='font-size:18px'>Mean Radius vs Texture Error</h2>"}]},"apps":[],"jobName":"paragraph_1539663694265_540999944","id":"20180721-010228_1156561655","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:181"},{"text":"%angular\n<h2 style='font-size:18px'>Concave Points Error vs Mean Compactness</h2>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":4,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h2 style='font-size:18px'>Concave Points Error vs Mean Compactness</h2>"}]},"apps":[],"jobName":"paragraph_1539663694266_-1886493523","id":"20180721-010238_1259738934","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:182"},{"text":"%angular\n<h2 style='font-size:18px'>Worst Area vs Mean Symmetry</h2>\n","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":4,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h2 style='font-size:18px'>Worst Area vs Mean Symmetry</h2>"}]},"apps":[],"jobName":"paragraph_1539663694266_1519089270","id":"20180721-010240_1997313789","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:183"},{"text":"%splicemachine\nSELECT MEAN_RADIUS, TEXTURE_ERROR FROM DEMO.BREAST_CANCER;","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":4,"editorMode":"ace/mode/sql","fontSize":9,"results":{"0":{"graph":{"mode":"scatterChart","height":300,"optionOpen":false,"setting":{"stackedAreaChart":{"style":"stream"}},"commonSetting":{},"keys":[{"name":"MEAN_RADIUS","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"TEXTURE_ERROR","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"MEAN_RADIUS\tTEXTURE_ERROR\n12.45\t0.8902\n9.504\t0.9768\n13.03\t2.342\n18.22\t1.593\n12.78\t0.8732\n18.46\t1.475\n6.981\t1.508\n14.87\t0.9489\n15.71\t0.8155\n13.74\t0.7574\n14.97\t1.065\n21.09\t0.7629\n18.08\t1.305\n17.42\t1.667\n12.83\t1.069\n10.48\t2.612\n17.35\t1.317\n18.81\t0.828\n11.85\t1.238\n13.05\t0.8285\n12.67\t0.9505\n9.606\t0.9429\n13.87\t1.363\n20.64\t0.6575\n19.55\t2.836\n10.94\t1.743\n14.69\t1.511\n14.04\t1.046\n14.53\t0.7213\n11.62\t1.74\n12.45\t1.207\n13.82\t1.528\n19.89\t0.8737\n20.47\t1.736\n10.82\t1.918\n20.13\t2.463\n18.25\t0.7732\n15.34\t0.7096\n14.99\t2.188\n15.1\t0.8339\n18.94\t0.7975\n14.48\t2.22\n12.18\t1.571\n15.78\t1.072\n18.45\t1.202\n13.0\t1.322\n10.8\t0.4064\n15.7\t1.15\n19.18\t1.073\n14.19\t1.845\n17.05\t0.679\n13.2\t1.601\n17.29\t1.633\n13.59\t1.166\n12.72\t0.6931\n11.7\t1.43\n14.11\t1.081\n11.06\t0.8225\n8.878\t1.2\n13.69\t0.5066\n10.26\t0.5477\n16.14\t0.6372\n11.61\t0.7339\n13.85\t1.678\n12.62\t0.6674\n9.667\t1.35\n14.64\t1.006\n12.54\t1.095\n12.88\t1.169\n10.96\t1.583\n10.86\t1.304\n16.6\t1.075\n13.71\t1.377\n21.16\t1.127\n13.48\t0.5914\n11.52\t0.9591\n8.888\t0.8522\n19.02\t0.6636\n9.876\t1.222\n17.95\t1.214\n12.77\t1.38\n8.219\t1.962\n16.78\t1.391\n11.41\t1.108\n14.45\t0.6509\n13.86\t1.194\n11.32\t0.8927\n12.89\t0.4402\n15.61\t0.9988\n13.85\t0.9195\n13.77\t0.6946\n14.61\t0.9115\n12.03\t0.9097\n19.68\t2.284\n9.436\t1.247\n16.17\t0.489\n8.734\t2.079\n12.85\t1.798\n13.66\t0.895\n14.02\t0.6549\n13.38\t1.924\n12.04\t2.643\n19.44\t1.408\n23.09\t0.7452\n12.75\t1.003\n20.55\t0.9901\n11.13\t1.467\n20.6\t1.595\n13.0\t1.002\n16.65\t0.9017\n13.44\t0.8265\n19.21\t1.193\n17.2\t1.041\n12.36\t1.502\n10.49\t1.534\n11.41\t0.4607\n11.71\t2.508\n9.731\t2.664\n17.47\t1.41\n15.28\t0.4956\n12.23\t1.326\n11.89\t1.563\n11.22\t1.647\n10.65\t1.493\n17.19\t0.7383\n19.16\t1.001\n10.91\t1.027\n12.76\t0.6594\n16.27\t1.232\n11.71\t0.7395\n12.54\t0.9527\n10.57\t1.231\n15.49\t1.331\n17.99\t0.8733\n9.742\t1.747\n10.97\t1.376\n11.63\t2.426\n14.92\t0.4334\n11.68\t1.154\n9.268\t1.093\n9.295\t1.13\n14.27\t1.851\n12.77\t1.367\n7.76\t1.428\n12.46\t1.599\n17.14\t0.976\n10.95\t1.428\n14.71\t1.15\n13.8\t0.6205\n14.64\t0.7372\n13.11\t0.9238\n18.66\t1.581\n11.43\t0.9938\n11.15\t0.7815\n14.97\t1.217\n10.08\t1.268\n17.54\t0.8282\n10.2\t1.922\n20.51\t1.189\n11.52\t1.038\n20.73\t1.617\n11.74\t1.268\n11.76\t2.105\n11.54\t0.3602\n16.26\t1.457\n10.26\t2.509\n13.3\t1.539\n13.46\t1.15\n21.61\t0.9209\n12.27\t1.781\n10.03\t1.341\n17.27\t1.679\n13.21\t1.35\n12.27\t3.647\n16.69\t0.5679\n9.676\t1.39\n24.63\t0.9004\n11.69\t1.978\n9.333\t1.879\n16.02\t1.187\n14.58\t0.9832\n19.07\t1.666\n13.05\t1.214\n12.31\t1.025\n14.62\t1.111\n11.64\t1.657\n24.25\t3.12\n14.95\t1.452\n13.15\t0.7927\n12.32\t0.6656\n18.31\t0.4757\n23.29\t1.56\n19.8\t1.186\n9.567\t0.8301\n20.94\t0.8208\n10.6\t1.197\n19.4\t0.9951\n14.26\t0.669\n8.597\t2.777\n16.03\t0.7476\n12.06\t1.152\n12.76\t1.285\n13.66\t0.5417\n12.1\t1.652\n11.36\t1.555\n10.48\t1.127\n13.78\t0.4833\n13.0\t1.232\n10.88\t0.538\n12.25\t1.139\n12.22\t0.7959\n11.26\t1.083\n7.729\t1.462\n12.88\t1.36\n15.78\t0.9849\n18.61\t1.849\n13.28\t0.8249\n8.618\t0.5796\n16.07\t1.016\n15.37\t0.8413\n12.36\t0.8944\n14.5\t0.857\n11.28\t1.343\n12.25\t0.9823\n13.43\t1.147\n11.71\t0.7655\n13.81\t1.93\n19.53\t1.321\n14.03\t1.503\n11.5\t0.8429\n13.59\t1.916\n16.24\t0.9173\n10.51\t1.143\n12.49\t0.7151\n12.98\t0.5664\n14.76\t0.3981\n16.5\t1.439\n11.08\t1.027\n14.06\t1.685\n11.04\t1.387\n10.8\t1.621\n10.57\t2.542\n9.755\t1.687\n12.83\t0.4875\n17.85\t1.046\n11.06\t1.03\n13.71\t1.249\n7.691\t1.479\n10.29\t2.239\n19.17\t3.568\n15.3\t1.012\n13.17\t0.6123\n10.17\t1.441\n13.53\t1.014\n13.27\t1.153\n22.27\t1.545\n13.37\t1.14\n9.738\t0.496\n17.68\t1.4\n15.46\t0.6583\n11.81\t1.926\n12.47\t1.044\n13.65\t0.4336\n23.21\t0.9635\n19.73\t0.78\n12.87\t1.219\n12.89\t1.389\n19.53\t1.161\n12.18\t0.5996\n11.22\t1.966\n11.47\t0.7615\n13.4\t0.6124\n11.27\t0.9858\n13.51\t1.332\n9.397\t1.182\n11.13\t0.9671\n18.03\t0.5906\n17.08\t1.152\n14.2\t1.018\n18.01\t1.288\n16.3\t0.4706\n9.847\t1.216\n11.54\t1.768\n10.16\t2.09\n15.85\t1.078\n17.57\t0.8225\n18.65\t0.6633\n8.598\t2.067\n18.05\t0.5505\n13.45\t1.373\n11.34\t0.9861\n13.85\t0.8561\n16.11\t1.332\n16.84\t2.06\n11.08\t1.805\n12.3\t0.8355\n15.12\t0.3621\n13.56\t0.4981\n20.48\t1.041\n17.3\t0.8568\n10.71\t1.489\n12.58\t1.35\n12.46\t1.04\n18.22\t0.5503\n11.25\t0.9961\n11.95\t1.05\n20.44\t0.9168\n11.04\t1.031\n12.8\t1.265\n14.99\t1.336\n12.72\t0.8836\n11.99\t1.204\n27.42\t1.306\n13.9\t0.5762\n12.46\t1.486\n15.46\t1.961\n8.571\t0.6793\n14.47\t1.079\n9.423\t2.927\n13.73\t1.169\n18.63\t1.466\n8.196\t0.9567\n14.25\t1.268\n20.18\t1.885\n15.06\t0.9644\n9.777\t1.424\n13.61\t1.005\n11.43\t1.908\n12.06\t0.7285\n10.66\t1.925\n14.22\t2.11\n9.876\t1.342\n10.18\t1.217\n14.22\t2.324\n19.45\t0.6342\n14.29\t0.7198\n11.94\t1.39\n20.09\t1.743\n9.042\t1.911\n12.3\t1.532\n11.66\t0.6724\n20.2\t1.892\n12.05\t1.434\n11.06\t0.6881\n15.13\t1.627\n14.9\t0.8749\n17.75\t1.077\n14.4\t0.9112\n11.49\t1.166\n13.16\t1.473\n11.74\t0.6417\n13.46\t0.6068\n14.74\t1.385\n14.59\t1.108\n14.54\t1.033\n11.84\t1.03\n13.17\t0.8937\n9.173\t2.265\n12.86\t1.095\n20.26\t1.509\n12.63\t1.803\n19.0\t1.342\n12.9\t0.7712\n10.9\t0.7614\n8.671\t0.7873\n12.77\t1.748\n17.01\t0.8554\n15.75\t0.9209\n17.46\t0.8561\n13.96\t0.8098\n11.29\t0.5293\n12.89\t0.469\n10.49\t1.563\n12.43\t2.2\n17.06\t2.129\n15.75\t1.324\n12.21\t0.7786\n12.39\t0.873\n11.8\t1.14\n11.89\t1.203\n12.4\t1.46\n14.8\t0.6221\n11.6\t0.7656\n16.25\t0.9857\n14.87\t1.636\n14.81\t0.6232\n12.34\t0.4957\n13.21\t1.597\n11.51\t2.904\n14.68\t1.24\n17.02\t1.398\n12.05\t0.7294\n12.68\t1.178\n11.45\t2.174\n12.18\t1.511\n14.26\t1.49\n15.1\t1.068\n10.75\t1.239\n11.75\t1.693\n9.904\t2.261\n9.72\t4.885\n13.11\t0.9223\n13.27\t0.8907\n13.64\t0.6612\n19.55\t1.199\n21.75\t1.352\n11.26\t1.905\n11.46\t1.059\n10.25\t1.471\n12.99\t0.6412\n25.73\t0.8509\n21.71\t1.051\n13.28\t0.5308\n17.91\t0.7747\n9.405\t2.878\n20.18\t1.001\n14.53\t1.354\n13.17\t0.685\n12.16\t1.19\n12.65\t0.6332\n13.4\t0.9306\n13.94\t2.635\n13.87\t1.047\n14.05\t1.492\n17.99\t0.9053\n16.13\t1.073\n19.27\t0.6062\n13.49\t1.353\n14.78\t1.281\n13.34\t1.016\n9.787\t2.043\n10.51\t1.86\n19.79\t1.199\n11.9\t0.6538\n19.19\t0.6336\n16.46\t1.284\n12.34\t1.809\n15.27\t0.3628\n14.34\t0.8121\n12.42\t0.6745\n15.32\t1.059\n9.742\t1.409\n11.37\t1.974\n11.6\t1.786\n20.16\t0.6863\n18.77\t1.53\n15.08\t1.506\n22.01\t0.6999\n14.6\t1.627\n11.93\t1.045\n15.5\t1.213\n18.82\t1.931\n21.1\t1.361\n13.24\t0.8135\n13.9\t0.9264\n12.47\t0.781\n14.58\t0.6237\n12.07\t0.504\n13.62\t1.336\n11.2\t3.896\n20.57\t0.7339\n19.81\t1.017\n16.13\t0.6857\n11.76\t1.21\n9.465\t2.011\n25.22\t1.474\n11.6\t0.5391\n8.726\t0.5864\n12.19\t0.8163\n11.8\t1.426\n19.59\t1.048\n13.01\t1.142\n14.86\t0.9622\n20.58\t1.48\n10.44\t0.9027\n11.3\t1.642\n15.66\t2.454\n17.93\t1.433\n14.41\t1.77\n13.2\t0.5735\n12.86\t1.042\n10.05\t2.015\n11.14\t0.8092\n16.35\t1.022\n12.21\t0.8309\n12.96\t1.299\n12.7\t0.6457\n14.86\t0.6683\n11.87\t1.554\n13.14\t0.7884\n13.47\t0.5733\n18.49\t1.045\n15.05\t1.198\n11.75\t1.907\n10.32\t0.967\n15.22\t1.205\n19.69\t0.7869\n13.54\t0.7886\n16.74\t0.9197\n13.64\t0.9234\n11.31\t0.9429\n19.1\t2.91\n14.42\t1.851\n11.93\t0.9227\n15.46\t0.7859\n14.95\t1.909\n12.34\t1.656\n12.81\t0.9899\n12.91\t0.9086\n11.84\t0.8652\n15.0\t0.4966\n13.75\t1.057\n15.53\t1.278\n11.89\t2.293\n14.96\t0.948\n9.0\t1.305\n20.34\t1.023\n23.51\t0.9245\n12.56\t1.478\n15.19\t0.4125\n13.88\t0.6218\n12.94\t0.905\n11.16\t1.678\n13.98\t0.9533\n19.59\t1.375\n9.668\t1.312\n13.7\t0.9462\n20.59\t1.216\n11.34\t1.01\n11.67\t0.8745\n10.26\t1.023\n20.92\t1.026\n11.42\t1.156\n13.08\t0.7477\n14.25\t1.019\n11.94\t0.6329\n9.029\t1.194\n12.0\t1.255\n13.61\t1.29\n8.95\t0.9789\n16.16\t1.265\n14.44\t0.7394\n23.27\t0.8561\n27.22\t1.481\n13.77\t2.112\n28.11\t1.476\n12.62\t1.066\n19.4\t1.802\n20.31\t1.033\n11.33\t1.28\n12.95\t0.7636\n13.5\t0.6864\n12.2\t0.8073\n14.42\t0.7706\n13.05\t1.51\n21.37\t1.309\n11.27\t1.067\n12.34\t0.9078\n11.57\t1.44\n12.87\t0.7693\n12.0\t1.705\n17.6\t1.465\n15.73\t0.3871\n15.04\t0.8423\n18.31\t0.9225\n13.68\t0.4801\n9.683\t1.363\n21.56\t1.256\n20.29\t0.7813\n"}]},"apps":[],"jobName":"paragraph_1539663694267_93139693","id":"20180721-010252_1853005539","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:184"},{"text":"%splicemachine\nSELECT CONCAVE_POINTS_ERROR, MEAN_COMPACTNESS FROM DEMO.BREAST_CANCER\n","user":"splice","dateUpdated":"2018-10-16T04:27:56+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":4,"editorMode":"ace/mode/sql","fontSize":9,"results":{"0":{"graph":{"mode":"multiBarChart","height":260,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"CONCAVE_POINTS_ERROR","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"MEAN_COMPACTNESS","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"CONCAVE_POINTS_ERROR\tMEAN_COMPACTNESS\n0.01137\t0.17\n0.01421\t0.06492\n0.01164\t0.03766\n0.009222\t0.1485\n0.008662\t0.05234\n0.0142\t0.1053\n0.0\t0.07568\n0.01271\t0.1649\n0.01268\t0.09462\n0.005828\t0.06376\n0.006432\t0.05352\n0.01567\t0.2832\n0.01444\t0.08642\n0.03927\t0.1146\n0.01499\t0.1799\n0.01133\t0.05971\n0.007671\t0.0629\n0.01463\t0.05884\n0.008578\t0.05642\n0.004821\t0.03735\n0.006474\t0.07664\n0.00851\t0.09228\n0.006042\t0.05492\n0.01232\t0.1076\n0.03441\t0.1318\n0.01155\t0.0746\n0.0158\t0.1836\n0.009046\t0.05895\n0.01136\t0.09242\n0.01841\t0.1483\n0.02721\t0.1511\n0.01616\t0.1681\n0.01178\t0.131\n0.01699\t0.1313\n0.005917\t0.06602\n0.01678\t0.1034\n0.01039\t0.109\n0.02252\t0.2135\n0.01917\t0.05131\n0.009222\t0.07081\n0.0137\t0.1029\n0.01761\t0.09947\n0.006797\t0.04038\n0.0139\t0.1752\n0.009148\t0.09709\n0.01153\t0.07589\n0.005344\t0.05736\n0.009767\t0.08799\n0.01221\t0.1428\n0.01627\t0.1306\n0.01384\t0.1572\n0.005383\t0.04524\n0.02149\t0.1273\n0.005044\t0.04052\n0.007978\t0.08393\n0.007638\t0.05253\n0.006627\t0.05306\n0.0101\t0.09097\n0.01506\t0.07698\n0.006335\t0.06374\n0.006929\t0.07542\n0.008747\t0.08501\n0.01304\t0.1168\n0.007039\t0.0633\n0.006888\t0.0543\n0.009883\t0.06258\n0.006144\t0.06698\n0.01161\t0.1085\n0.01244\t0.1661\n0.01346\t0.09752\n0.0\t0.04227\n0.01557\t0.1023\n0.01448\t0.1645\n0.01038\t0.1022\n0.01262\t0.1255\n0.00867\t0.05473\n0.01766\t0.1531\n0.012\t0.1206\n0.01112\t0.09697\n0.009863\t0.06722\n0.00892\t0.05761\n0.01022\t0.1305\n0.01604\t0.09182\n0.01712\t0.08155\n0.007303\t0.1206\n0.01435\t0.1517\n0.003125\t0.03813\n0.0137\t0.1346\n0.005174\t0.05616\n0.01043\t0.07688\n0.006829\t0.06221\n0.006324\t0.03515\n0.003951\t0.03892\n0.01806\t0.1339\n0.006565\t0.05956\n0.01196\t0.1438\n0.0\t0.07428\n0.01341\t0.08316\n0.01274\t0.1147\n0.01076\t0.05581\n0.009128\t0.07426\n0.01183\t0.06\n0.01176\t0.1448\n0.02156\t0.1275\n0.009199\t0.1117\n0.01421\t0.1739\n0.01024\t0.08194\n0.01664\t0.277\n0.01226\t0.1932\n0.0113\t0.1457\n0.006881\t0.06031\n0.01538\t0.1267\n0.01127\t0.183\n0.01293\t0.09445\n0.008614\t0.08578\n0.00646\t0.06685\n0.01307\t0.06095\n0.05279\t0.1599\n0.01569\t0.1603\n0.006009\t0.1052\n0.0114\t0.08087\n0.01785\t0.1154\n0.003419\t0.03574\n0.006245\t0.07234\n0.009875\t0.08995\n0.01293\t0.1453\n0.009393\t0.04721\n0.01069\t0.07948\n0.01392\t0.1319\n0.01121\t0.07281\n0.003617\t0.0265\n0.02919\t0.166\n0.01639\t0.1562\n0.0148\t0.1304\n0.01052\t0.08333\n0.01768\t0.1113\n0.009215\t0.08574\n0.008399\t0.08549\n0.01167\t0.09263\n0.02188\t0.2239\n0.0158\t0.1225\n0.01276\t0.1154\n0.009305\t0.04234\n0.0\t0.04362\n0.01432\t0.2396\n0.02397\t0.2276\n0.01037\t0.1218\n0.01272\t0.1365\n0.009206\t0.128\n0.01623\t0.1339\n0.01388\t0.1765\n0.01601\t0.11\n0.008602\t0.06889\n0.008232\t0.05113\n0.009073\t0.07885\n0.002404\t0.04695\n0.01345\t0.1198\n0.01071\t0.05907\n0.01091\t0.1074\n0.01006\t0.07808\n0.00928\t0.1143\n0.01846\t0.0434\n0.01432\t0.05914\n0.004667\t0.05969\n0.01186\t0.1283\n0.01296\t0.09159\n0.006399\t0.06373\n0.005179\t0.04726\n0.01288\t0.2087\n0.01075\t0.06526\n0.003527\t0.03912\n0.01742\t0.1109\n0.006451\t0.05205\n0.0\t0.03398\n0.005297\t0.07112\n0.0145\t0.2204\n0.01597\t0.2106\n0.01766\t0.1552\n0.01282\t0.05605\n0.007591\t0.06669\n0.01352\t0.1868\n0.02638\t0.219\n0.004167\t0.03789\n0.007965\t0.06829\n0.008606\t0.08606\n0.01398\t0.1017\n0.01822\t0.2867\n0.02801\t0.1305\n0.009536\t0.08498\n0.01241\t0.06981\n0.006719\t0.08468\n0.02465\t0.2084\n0.01712\t0.1306\n0.009623\t0.04087\n0.01864\t0.1606\n0.01365\t0.1147\n0.01499\t0.1442\n0.005243\t0.0522\n0.0\t0.05847\n0.01459\t0.1371\n0.005495\t0.05794\n0.009997\t0.07952\n0.008356\t0.07548\n0.007513\t0.09758\n0.005872\t0.05313\n0.01264\t0.1013\n0.005657\t0.06718\n0.006336\t0.05073\n0.006691\t0.1069\n0.004551\t0.052\n0.009894\t0.1152\n0.004065\t0.04413\n0.0\t0.04878\n0.00762\t0.05824\n0.01282\t0.1292\n0.01911\t0.1066\n0.00956\t0.1436\n0.005742\t0.05272\n0.01809\t0.08424\n0.01763\t0.1036\n0.005558\t0.06815\n0.012\t0.1099\n0.01965\t0.1136\n0.007924\t0.06679\n0.009443\t0.06288\n0.01185\t0.06141\n0.01291\t0.1768\n0.01078\t0.113\n0.01004\t0.06945\n0.009175\t0.05991\n0.009919\t0.08259\n0.01209\t0.1802\n0.0125\t0.06797\n0.00339\t0.03834\n0.009811\t0.1125\n0.01067\t0.0778\n0.01033\t0.08468\n0.01339\t0.2154\n0.009155\t0.05361\n0.007483\t0.07804\n0.01045\t0.05743\n0.01111\t0.04462\n0.006104\t0.04626\n0.00836\t0.08269\n0.007437\t0.06217\n0.01285\t0.1071\n0.01352\t0.107\n0.01364\t0.1199\n0.01721\t0.07658\n0.0409\t0.2458\n0.01083\t0.1697\n0.006853\t0.1047\n0.008193\t0.08061\n0.008239\t0.1047\n0.01082\t0.05055\n0.0248\t0.2768\n0.01038\t0.07325\n0.0\t0.04102\n0.01841\t0.1665\n0.0132\t0.1555\n0.00624\t0.05562\n0.01037\t0.1058\n0.006659\t0.08711\n0.01716\t0.1682\n0.01971\t0.1849\n0.00633\t0.06219\n0.01774\t0.0958\n0.01733\t0.1642\n0.005051\t0.03212\n0.004967\t0.06779\n0.006315\t0.05886\n0.005484\t0.05696\n0.01164\t0.1111\n0.01367\t0.1147\n0.005128\t0.06053\n0.006189\t0.03834\n0.009753\t0.1232\n0.01458\t0.111\n0.0135\t0.1108\n0.01648\t0.1289\n0.01431\t0.06712\n0.006801\t0.08419\n0.01494\t0.112\n0.007082\t0.07504\n0.01992\t0.1002\n0.01354\t0.1157\n0.01695\t0.1686\n0.009259\t0.08963\n0.0207\t0.2146\n0.009366\t0.08165\n0.006435\t0.06575\n0.004814\t0.06136\n0.01167\t0.1137\n0.0111\t0.07223\n0.01583\t0.05743\n0.006433\t0.07253\n0.00826\t0.09588\n0.00836\t0.1192\n0.01671\t0.08348\n0.01262\t0.1041\n0.01745\t0.1289\n0.002924\t0.04216\n0.01403\t0.1014\n0.01143\t0.1117\n0.002941\t0.04458\n0.01052\t0.1206\n0.01461\t0.1131\n0.00696\t0.07079\n0.01384\t0.08895\n0.01196\t0.1025\n0.005623\t0.04522\n0.01665\t0.09218\n0.02598\t0.1988\n0.004832\t0.05319\n0.007895\t0.04043\n0.02041\t0.187\n0.00732\t0.07632\n0.01162\t0.123\n0.0\t0.04971\n0.01628\t0.2293\n0.01158\t0.1887\n0.005917\t0.05943\n0.01848\t0.2008\n0.02593\t0.3454\n0.01851\t0.1553\n0.01023\t0.08404\n0.00688\t0.07862\n0.00952\t0.09486\n0.006273\t0.05241\n0.0\t0.04302\n0.01666\t0.2413\n0.007527\t0.07232\n0.007624\t0.08502\n0.01011\t0.1039\n0.01267\t0.1188\n0.003608\t0.02675\n0.01633\t0.1011\n0.01936\t0.1838\n0.02527\t0.1972\n0.006522\t0.04202\n0.006296\t0.0363\n0.02536\t0.1669\n0.01667\t0.1073\n0.004168\t0.04768\n0.009087\t0.04605\n0.02234\t0.2225\n0.0111\t0.1314\n0.00637\t0.05223\n0.008038\t0.08228\n0.005564\t0.05275\n0.01528\t0.09661\n0.007369\t0.1138\n0.01269\t0.07214\n0.01606\t0.133\n0.0109\t0.1595\n0.01044\t0.1516\n0.01215\t0.1231\n0.0156\t0.08751\n0.008179\t0.09546\n0.01269\t0.1313\n0.02295\t0.1209\n0.01361\t0.08028\n0.007584\t0.09509\n0.003576\t0.03718\n0.0\t0.04276\n0.01757\t0.06601\n0.01123\t0.07304\n0.008637\t0.1204\n0.01374\t0.1298\n0.01342\t0.1279\n0.008849\t0.07608\n0.005905\t0.03729\n0.009199\t0.06678\n0.0112\t0.03454\n0.01744\t0.1056\n0.02283\t0.2364\n0.007087\t0.07175\n0.01051\t0.1297\n0.005398\t0.06232\n0.009276\t0.0812\n0.01167\t0.1316\n0.006897\t0.0889\n0.007497\t0.05855\n0.02215\t0.1893\n0.01183\t0.08345\n0.01056\t0.05016\n0.00574\t0.06307\n0.009117\t0.06877\n0.01267\t0.1021\n0.01109\t0.072\n0.01112\t0.1496\n0.00566\t0.09092\n0.0129\t0.1262\n0.007506\t0.09362\n0.01519\t0.07057\n0.02292\t0.2233\n0.02258\t0.1807\n0.005612\t0.05139\n0.01152\t0.1141\n0.0246\t0.1294\n0.0\t0.02344\n0.008304\t0.1483\n0.009057\t0.04994\n0.01103\t0.0663\n0.01519\t0.2063\n0.01561\t0.1961\n0.03487\t0.1181\n0.007807\t0.07694\n0.01544\t0.1111\n0.007315\t0.09965\n0.01508\t0.2363\n0.01197\t0.08562\n0.008468\t0.08575\n0.01051\t0.2576\n0.008674\t0.06159\n0.0191\t0.1489\n0.008848\t0.078\n0.008463\t0.05994\n0.005161\t0.07838\n0.01032\t0.1334\n0.01334\t0.1469\n0.02853\t0.09755\n0.009061\t0.1018\n0.01626\t0.1126\n0.01587\t0.2776\n0.01297\t0.2022\n0.009643\t0.1719\n0.01184\t0.07698\n0.01184\t0.1479\n0.01383\t0.1535\n0.00525\t0.05301\n0.01544\t0.1303\n0.01043\t0.1589\n0.0111\t0.1296\n0.02794\t0.1185\n0.01813\t0.1556\n0.01321\t0.1353\n0.007373\t0.0623\n0.01286\t0.07624\n0.003762\t0.03393\n0.02127\t0.2284\n0.009472\t0.04689\n0.009924\t0.05008\n0.006998\t0.05688\n0.01247\t0.08564\n0.01816\t0.1402\n0.01746\t0.09769\n0.01471\t0.1954\n0.01576\t0.06636\n0.005832\t0.05242\n0.02139\t0.1571\n0.01834\t0.1389\n0.01466\t0.1175\n0.01368\t0.1223\n0.006275\t0.05326\n0.007096\t0.0763\n0.008648\t0.08918\n0.007986\t0.09009\n0.009064\t0.06747\n0.0\t0.03558\n0.0134\t0.07864\n0.01521\t0.1027\n0.009067\t0.1559\n0.007445\t0.04966\n0.009333\t0.07773\n0.0203\t0.2665\n0.006884\t0.07525\n0.0104\t0.08201\n0.008094\t0.09509\n0.01843\t0.17\n0.01303\t0.1666\n0.001852\t0.01938\n0.01883\t0.198\n0.02765\t0.1348\n0.004972\t0.07722\n0.01314\t0.1325\n0.03024\t0.3114\n0.008522\t0.07027\n0.02771\t0.1676\n0.002386\t0.05251\n0.01011\t0.08834\n0.008043\t0.07326\n0.01471\t0.06064\n0.01656\t0.1497\n0.01087\t0.07823\n0.01065\t0.07899\n0.008231\t0.05794\n0.008281\t0.07074\n0.01553\t0.1064\n0.01254\t0.1089\n0.008791\t0.1155\n0.01573\t0.1317\n0.009423\t0.08597\n0.01316\t0.09713\n0.005495\t0.04994\n0.01608\t0.2087\n0.02058\t0.1599\n0.01315\t0.08129\n0.01195\t0.1336\n0.007956\t0.06059\n0.008965\t0.04701\n0.01843\t0.1791\n0.01424\t0.1141\n0.007711\t0.07849\n0.01093\t0.1223\n0.01527\t0.1167\n0.01135\t0.1015\n0.007408\t0.03774\n0.00842\t0.05366\n0.006747\t0.069\n0.01155\t0.1096\n0.01007\t0.06807\n0.01022\t0.1639\n0.0191\t0.0721\n0.01187\t0.09823\n0.003472\t0.03116\n0.01369\t0.1875\n0.01301\t0.1283\n0.01966\t0.1038\n0.009155\t0.06934\n0.007016\t0.04831\n0.007308\t0.08836\n0.006159\t0.05978\n0.009567\t0.1133\n0.01499\t0.09871\n0.003934\t0.05428\n0.009233\t0.07957\n0.01479\t0.1644\n0.01107\t0.08499\n0.005298\t0.09453\n0.01097\t0.08066\n0.02624\t0.2236\n0.01867\t0.2839\n0.00649\t0.127\n0.01161\t0.1098\n0.008\t0.04751\n0.03322\t0.1413\n0.007027\t0.07165\n0.009921\t0.08511\n0.02308\t0.1243\n0.009231\t0.1284\n0.01493\t0.1021\n0.01623\t0.1145\n0.01241\t0.1914\n0.0206\t0.1267\n0.01407\t0.1516\n0.008691\t0.07529\n0.01559\t0.1558\n0.008185\t0.1088\n0.003333\t0.03872\n0.01132\t0.07943\n0.003242\t0.03614\n0.005142\t0.06545\n0.01243\t0.1139\n0.01876\t0.1304\n0.01343\t0.1515\n0.02047\t0.1114\n0.0103\t0.04571\n0.008799\t0.07722\n0.006502\t0.07883\n0.009166\t0.0645\n0.02311\t0.2004\n0.01067\t0.1299\n0.01004\t0.1364\n0.01046\t0.1248\n0.005077\t0.07255\n0.009615\t0.0503\n0.02454\t0.1159\n0.01885\t0.1328\n"}]},"apps":[],"jobName":"paragraph_1539663694267_-3195378","id":"20180721-010300_1402006588","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:185"},{"text":"%splicemachine\nSELECT WORST_AREA, MEAN_SYMMETRY FROM DEMO.BREAST_CANCER\n","user":"splice","dateUpdated":"2018-10-16T04:27:57+0000","config":{"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":4,"editorMode":"ace/mode/sql","editorHide":false,"fontSize":9,"results":{"0":{"graph":{"mode":"lineChart","height":286,"optionOpen":false,"setting":{"lineChart":{"forceY":true,"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"MEAN_SYMMETRY","index":1,"aggr":"sum"},{"name":"WORST_AREA","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"MEAN_SYMMETRY","index":1,"aggr":"min"},{"name":"WORST_AREA","index":0,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"WORST_AREA\tMEAN_SYMMETRY\n741.6\t0.2087\n314.9\t0.1815\n545.9\t0.1467\n1321.0\t0.2092\n554.9\t0.159\n1603.0\t0.2132\n185.2\t0.193\n1095.0\t0.2157\n922.8\t0.1816\n725.9\t0.1473\n782.1\t0.1515\n2089.0\t0.2395\n1228.0\t0.177\n1021.0\t0.1308\n706.0\t0.2123\n402.8\t0.1737\n1218.0\t0.1564\n1236.0\t0.155\n517.8\t0.1875\n672.4\t0.1453\n574.4\t0.1707\n353.6\t0.2036\n694.4\t0.1424\n1946.0\t0.1571\n1313.0\t0.1989\n472.4\t0.1486\n809.2\t0.2086\n750.0\t0.1714\n749.9\t0.165\n528.1\t0.1957\n580.6\t0.2082\n788.0\t0.2275\n1646.0\t0.1802\n1645.0\t0.2166\n505.6\t0.1976\n1731.0\t0.1752\n1606.0\t0.1794\n980.9\t0.2521\n698.8\t0.1565\n1030.0\t0.1616\n1866.0\t0.1582\n808.9\t0.2075\n547.8\t0.1739\n1272.0\t0.2096\n1590.0\t0.1692\n616.7\t0.254\n414.0\t0.1381\n1269.0\t0.1618\n1688.0\t0.1767\n811.3\t0.2235\n1189.0\t0.2131\n602.0\t0.1487\n1295.0\t0.2108\n739.1\t0.1573\n553.7\t0.1638\n483.1\t0.1936\n749.9\t0.1373\n440.0\t0.1776\n302.0\t0.193\n670.6\t0.1872\n394.5\t0.18\n947.9\t0.1735\n475.7\t0.1886\n749.1\t0.1555\n633.5\t0.1799\n385.2\t0.2238\n831.0\t0.1409\n552.0\t0.1943\n674.7\t0.1709\n407.5\t0.1619\n412.3\t0.1661\n1124.0\t0.159\n897.0\t0.2196\n2615.0\t0.1769\n740.4\t0.172\n506.2\t0.192\n284.4\t0.1902\n1623.0\t0.1953\n361.2\t0.1945\n1261.0\t0.2129\n653.6\t0.1585\n249.8\t0.2222\n1260.0\t0.1893\n467.2\t0.1167\n1044.0\t0.195\n750.1\t0.2106\n452.3\t0.1869\n639.1\t0.1596\n988.6\t0.1547\n670.0\t0.211\n661.1\t0.1592\n840.8\t0.1632\n523.4\t0.1382\n1540.0\t0.2082\n439.6\t0.1506\n861.5\t0.199\n317.0\t0.1985\n645.8\t0.158\n708.8\t0.1848\n688.9\t0.1589\n705.6\t0.1375\n567.6\t0.1854\n1740.0\t0.1823\n2782.0\t0.1505\n624.1\t0.212\n1809.0\t0.2127\n436.6\t0.203\n1821.0\t0.2397\n739.3\t0.235\n2215.0\t0.1995\n787.9\t0.1784\n2145.0\t0.1917\n1681.0\t0.1927\n574.7\t0.193\n402.8\t0.2217\n510.5\t0.1667\n546.7\t0.1339\n380.5\t0.2548\n1660.0\t0.1538\n973.1\t0.1727\n638.4\t0.1979\n531.2\t0.1967\n470.9\t0.1845\n455.7\t0.1897\n1436.0\t0.1867\n1724.0\t0.1902\n392.2\t0.1449\n618.8\t0.1601\n1121.0\t0.1948\n516.4\t0.2009\n585.7\t0.1528\n351.9\t0.2188\n1359.0\t0.1929\n1349.0\t0.1992\n380.9\t0.2538\n476.4\t0.1489\n527.8\t0.1799\n906.6\t0.1687\n549.8\t0.1853\n300.2\t0.2378\n326.6\t0.2197\n728.3\t0.1926\n594.7\t0.1539\n268.6\t0.1587\n711.4\t0.203\n1461.0\t0.304\n514.0\t0.1895\n985.5\t0.2027\n812.4\t0.1662\n803.6\t0.2116\n827.2\t0.1925\n1549.0\t0.1966\n462.0\t0.1734\n440.8\t0.183\n793.7\t0.178\n437.0\t0.1703\n1239.0\t0.1506\n403.7\t0.1964\n1872.0\t0.1448\n491.8\t0.1883\n3432.0\t0.1769\n533.7\t0.2101\n553.6\t0.1619\n467.8\t0.1833\n975.2\t0.1869\n357.1\t0.1633\n621.2\t0.1815\n680.6\t0.1421\n2081.0\t0.2162\n610.2\t0.1966\n376.3\t0.163\n1284.0\t0.1467\n632.9\t0.1619\n558.9\t0.1701\n1084.0\t0.1846\n328.1\t0.2057\n2642.0\t0.1991\n487.7\t0.2131\n295.8\t0.1692\n1150.0\t0.1528\n896.9\t0.2252\n1651.0\t0.231\n624.1\t0.1819\n611.1\t0.172\n803.7\t0.1685\n521.7\t0.1801\n2073.0\t0.2655\n971.4\t0.1957\n677.3\t0.1822\n549.1\t0.1959\n1410.0\t0.1621\n1986.0\t0.22\n2009.0\t0.2094\n335.9\t0.1551\n2010.0\t0.2205\n424.8\t0.1922\n1628.0\t0.1893\n819.7\t0.1635\n240.1\t0.2163\n1070.0\t0.1782\n562.6\t0.1555\n579.7\t0.1759\n657.0\t0.1792\n559.5\t0.1937\n521.3\t0.1601\n440.4\t0.1925\n706.6\t0.1405\n628.5\t0.1667\n433.1\t0.1861\n622.9\t0.1544\n515.3\t0.2124\n435.9\t0.1637\n248.0\t0.187\n595.7\t0.1566\n1299.0\t0.1842\n1403.0\t0.1697\n907.2\t0.1974\n274.9\t0.1683\n1223.0\t0.1798\n830.9\t0.1717\n544.1\t0.1602\n745.5\t0.1856\n434.0\t0.1771\n564.2\t0.197\n993.6\t0.1598\n521.5\t0.1516\n1153.0\t0.2251\n2477.0\t0.1428\n715.5\t0.1517\n508.9\t0.1834\n661.5\t0.1635\n1031.0\t0.1876\n362.7\t0.1695\n544.2\t0.1215\n634.3\t0.1761\n880.8\t0.1521\n1009.0\t0.1495\n508.1\t0.2196\n684.5\t0.1641\n471.4\t0.1714\n489.5\t0.2016\n366.3\t0.2372\n349.9\t0.1621\n605.8\t0.1705\n1210.0\t0.122\n411.1\t0.1954\n701.9\t0.1714\n223.6\t0.2037\n357.6\t0.1593\n1332.0\t0.2397\n1269.0\t0.1926\n740.7\t0.1746\n368.6\t0.2743\n605.5\t0.2403\n830.6\t0.1386\n2360.0\t0.2556\n632.1\t0.1422\n342.9\t0.1903\n1302.0\t0.1971\n1102.0\t0.1966\n489.5\t0.1718\n677.9\t0.1925\n706.2\t0.136\n2944.0\t0.1909\n1933.0\t0.1733\n597.5\t0.201\n595.6\t0.1432\n2053.0\t0.1792\n513.1\t0.1673\n436.1\t0.194\n475.8\t0.1634\n663.5\t0.165\n476.1\t0.2018\n675.2\t0.1806\n301.0\t0.1274\n421.1\t0.1511\n1292.0\t0.172\n1648.0\t0.1793\n828.5\t0.1506\n1426.0\t0.2116\n928.2\t0.1711\n376.5\t0.1387\n457.8\t0.1818\n347.3\t0.1791\n876.5\t0.1847\n1227.0\t0.1739\n1567.0\t0.1907\n273.9\t0.1828\n1610.0\t0.2152\n699.4\t0.1638\n518.1\t0.1487\n725.9\t0.1614\n1233.0\t0.1861\n1032.0\t0.1844\n396.5\t0.1566\n546.7\t0.1667\n989.5\t0.1594\n686.6\t0.1962\n1750.0\t0.1467\n1222.0\t0.1813\n410.4\t0.1668\n564.1\t0.1697\n551.3\t0.1781\n1485.0\t0.1807\n492.7\t0.1773\n496.2\t0.2459\n1780.0\t0.1618\n447.1\t0.2003\n591.0\t0.1574\n867.1\t0.1944\n586.8\t0.1459\n513.9\t0.182\n4254.0\t0.2061\n718.9\t0.1813\n534.0\t0.1613\n909.4\t0.1807\n275.6\t0.1678\n808.9\t0.1872\n330.6\t0.1742\n697.7\t0.2069\n1670.0\t0.2183\n242.2\t0.1769\n959.5\t0.1949\n1623.0\t0.2906\n1025.0\t0.1855\n367.0\t0.1584\n848.7\t0.1761\n503.0\t0.1645\n532.8\t0.159\n408.3\t0.1928\n762.4\t0.2384\n331.6\t0.1934\n375.6\t0.191\n764.0\t0.1342\n1972.0\t0.1776\n684.6\t0.1508\n546.1\t0.1588\n1696.0\t0.2249\n297.1\t0.233\n544.3\t0.1539\n542.5\t0.1671\n1671.0\t0.1875\n488.4\t0.1203\n496.7\t0.1535\n931.4\t0.1852\n832.7\t0.2041\n1437.0\t0.1713\n734.6\t0.1707\n467.6\t0.1779\n648.3\t0.1713\n473.8\t0.1499\n719.8\t0.1723\n826.4\t0.184\n733.5\t0.1454\n943.2\t0.2303\n888.7\t0.2301\n759.4\t0.2128\n310.1\t0.2341\n622.1\t0.1718\n1750.0\t0.2095\n527.4\t0.1735\n1538.0\t0.1946\n643.8\t0.1778\n470.0\t0.1442\n259.2\t0.1722\n579.5\t0.1694\n1210.0\t0.2026\n1088.0\t0.1935\n1408.0\t0.1809\n826.0\t0.1908\n457.5\t0.1769\n577.0\t0.1337\n375.4\t0.1482\n515.9\t0.1472\n1362.0\t0.1727\n915.3\t0.2375\n624.6\t0.1695\n600.5\t0.1779\n562.0\t0.1847\n522.9\t0.2019\n515.8\t0.1811\n829.5\t0.1893\n495.1\t0.1516\n939.7\t0.2151\n783.6\t0.1487\n760.2\t0.1659\n564.9\t0.1689\n629.6\t0.1628\n474.2\t0.1388\n1138.0\t0.1586\n1344.0\t0.2248\n582.6\t0.1675\n888.3\t0.1905\n525.1\t0.1842\n495.2\t0.19\n709.0\t0.1704\n762.6\t0.2001\n441.2\t0.1399\n543.9\t0.1993\n390.2\t0.1669\n303.8\t0.1653\n639.3\t0.185\n708.8\t0.1496\n683.4\t0.1717\n1926.0\t0.1893\n2384.0\t0.1721\n437.6\t0.2595\n489.8\t0.1411\n390.4\t0.1743\n576.0\t0.1652\n3234.0\t0.1956\n3143.0\t0.1717\n623.7\t0.1617\n1304.0\t0.2113\n359.4\t0.2025\n1479.0\t0.1724\n830.5\t0.1473\n687.6\t0.1454\n547.4\t0.1464\n633.7\t0.1641\n844.4\t0.2116\n653.3\t0.1976\n688.6\t0.162\n706.7\t0.1537\n2019.0\t0.2419\n1315.0\t0.2164\n1813.0\t0.1853\n698.8\t0.1809\n925.1\t0.1953\n614.9\t0.1942\n366.1\t0.135\n374.4\t0.1922\n1589.0\t0.2202\n509.6\t0.1995\n1495.0\t0.1741\n981.2\t0.1794\n768.9\t0.1943\n932.7\t0.1359\n873.2\t0.2075\n543.4\t0.1546\n928.8\t0.2398\n355.2\t0.2081\n459.3\t0.2013\n476.5\t0.1935\n1657.0\t0.1928\n1873.0\t0.1953\n1050.0\t0.1647\n2227.0\t0.1824\n758.2\t0.1627\n589.5\t0.1601\n1748.0\t0.2085\n1603.0\t0.1943\n2022.0\t0.1554\n733.5\t0.1601\n830.5\t0.1579\n607.3\t0.1526\n862.0\t0.1739\n549.9\t0.1657\n729.8\t0.1664\n439.6\t0.106\n1956.0\t0.1812\n2398.0\t0.1582\n1261.0\t0.1998\n516.5\t0.1495\n330.7\t0.1717\n2562.0\t0.1829\n512.5\t0.162\n284.4\t0.1649\n545.2\t0.188\n591.7\t0.2678\n2232.0\t0.2027\n608.8\t0.1395\n784.7\t0.1737\n1656.0\t0.1765\n395.4\t0.1788\n472.9\t0.2054\n1226.0\t0.2495\n1320.0\t0.1538\n767.3\t0.1714\n636.9\t0.1632\n599.5\t0.1543\n384.0\t0.189\n453.5\t0.169\n1165.0\t0.2175\n529.9\t0.1646\n621.9\t0.1874\n566.9\t0.1583\n777.5\t0.1573\n507.2\t0.1349\n689.1\t0.1562\n660.2\t0.1779\n1600.0\t0.1832\n967.0\t0.1561\n552.3\t0.1598\n384.9\t0.1885\n915.0\t0.2128\n1709.0\t0.2069\n711.2\t0.1885\n1229.0\t0.1896\n656.7\t0.1353\n466.7\t0.1516\n1298.0\t0.1634\n826.4\t0.1879\n583.0\t0.1688\n1156.0\t0.1931\n809.7\t0.1744\n553.0\t0.1551\n570.7\t0.1466\n600.6\t0.1829\n546.3\t0.1533\n808.2\t0.1881\n706.0\t0.1773\n1035.0\t0.2091\n472.4\t0.2015\n809.8\t0.1879\n285.5\t0.1788\n1938.0\t0.2569\n2906.0\t0.1797\n547.4\t0.1533\n819.1\t0.1721\n745.3\t0.1607\n580.9\t0.1735\n458.0\t0.1615\n869.3\t0.1669\n1421.0\t0.1663\n380.2\t0.168\n686.5\t0.1732\n1760.0\t0.1848\n478.6\t0.1927\n550.6\t0.1859\n357.4\t0.1669\n1819.0\t0.2149\n567.7\t0.2597\n630.5\t0.1967\n799.6\t0.1885\n527.2\t0.1868\n324.7\t0.2111\n567.9\t0.2079\n906.5\t0.1609\n270.0\t0.1305\n1175.0\t0.216\n766.9\t0.1724\n2403.0\t0.1801\n3216.0\t0.18\n806.9\t0.1834\n2499.0\t0.1648\n624.0\t0.1514\n1417.0\t0.1978\n1844.0\t0.1814\n458.0\t0.1954\n585.4\t0.173\n698.7\t0.1365\n583.1\t0.1638\n862.1\t0.1912\n591.2\t0.2035\n1535.0\t0.1973\n450.0\t0.181\n533.1\t0.1571\n520.5\t0.2031\n626.9\t0.1861\n523.7\t0.1615\n1437.0\t0.1696\n854.3\t0.1784\n856.9\t0.1668\n1493.0\t0.186\n773.4\t0.1631\n364.2\t0.158\n2027.0\t0.1726\n1575.0\t0.1809\n"}]},"apps":[],"jobName":"paragraph_1539663694268_-1450353034","id":"20180721-010301_379759080","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:186"},{"text":"%angular\n<h2 style='font-size:18px'>Worst Perimeter vs Mean Texture</h2>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":4,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h2 style='font-size:18px'>Worst Perimeter vs Mean Texture</h2>"}]},"apps":[],"jobName":"paragraph_1539663694269_-276185366","id":"20180721-010303_496409108","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:187"},{"text":"%angular\n<h2 style='font-size:18px'>Worst Smoothness vs Mean Concavity</h2>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":4,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h2 style='font-size:18px'>Worst Smoothness vs Mean Concavity</h2>"}]},"apps":[],"jobName":"paragraph_1539663694270_-958061499","id":"20180721-010305_368553947","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:188"},{"text":"%angular\n<h2 style='font-size:18px'>Worst Radius vs Label</h2>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":4,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h2 style='font-size:18px'>Worst Radius vs Label</h2>"}]},"apps":[],"jobName":"paragraph_1539663694270_2024477728","id":"20180721-010308_677247522","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:189"},{"text":"%splicemachine\nSELECT WORST_PERIMETER, MEAN_TEXTURE FROM DEMO.BREAST_CANCER","user":"splice","dateUpdated":"2018-10-16T04:27:57+0000","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":4,"editorMode":"ace/mode/sql","editorHide":false,"fontSize":9,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"WORST_PERIMETER","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"MEAN_TEXTURE","index":1,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"WORST_PERIMETER\tMEAN_TEXTURE\n103.4\t15.7\n65.13\t12.44\n84.46\t18.42\n135.1\t18.7\n85.67\t16.49\n152.2\t18.52\n50.41\t13.43\n127.1\t16.67\n114.3\t13.93\n97.19\t17.91\n102.3\t19.76\n176.5\t26.57\n129.1\t21.84\n120.4\t25.56\n105.3\t22.33\n73.68\t19.86\n128.2\t23.06\n129.0\t19.98\n84.35\t17.46\n93.96\t13.84\n88.7\t17.3\n71.25\t16.84\n96.74\t16.21\n166.8\t17.35\n142.0\t23.21\n82.76\t18.59\n114.1\t13.98\n101.2\t15.98\n103.1\t13.98\n88.14\t18.18\n97.82\t16.41\n106.0\t24.49\n160.5\t20.26\n152.0\t20.67\n83.9\t24.21\n155.0\t28.25\n153.2\t19.98\n125.1\t14.26\n95.54\t25.2\n117.7\t22.02\n165.9\t21.31\n108.4\t21.46\n84.58\t20.52\n130.3\t22.91\n145.6\t21.91\n90.82\t20.78\n73.66\t9.71\n129.3\t20.31\n166.4\t22.49\n115.0\t23.81\n133.5\t19.08\n88.28\t17.43\n137.9\t22.13\n98.91\t17.84\n88.54\t13.78\n80.92\t19.11\n98.4\t12.88\n79.76\t14.96\n65.27\t15.49\n99.16\t16.07\n73.23\t12.22\n115.9\t14.86\n81.93\t16.02\n100.9\t19.6\n91.62\t17.15\n70.88\t18.49\n106.0\t16.85\n86.67\t16.32\n99.31\t18.22\n76.43\t17.62\n74.08\t21.48\n126.7\t28.08\n110.6\t20.83\n188.0\t23.04\n107.3\t20.82\n81.81\t18.75\n62.56\t14.64\n152.9\t24.59\n72.22\t19.4\n129.2\t20.01\n92.04\t22.47\n58.08\t20.7\n130.7\t18.8\n79.12\t14.92\n117.9\t20.22\n104.4\t16.93\n79.82\t27.08\n105.0\t14.11\n115.9\t19.38\n98.37\t15.18\n94.17\t13.27\n103.7\t15.69\n82.74\t17.93\n157.6\t21.68\n75.79\t18.32\n113.1\t16.07\n64.01\t16.84\n91.63\t21.37\n101.4\t19.13\n96.53\t15.66\n96.69\t30.72\n87.24\t28.14\n153.9\t18.82\n211.5\t19.83\n93.63\t16.7\n160.2\t20.86\n77.8\t22.44\n184.6\t29.33\n106.2\t21.82\n177.0\t21.38\n102.5\t21.58\n170.1\t18.57\n151.6\t24.52\n91.46\t21.8\n74.22\t19.29\n83.74\t10.82\n86.16\t16.67\n71.04\t15.34\n155.3\t24.68\n113.8\t22.41\n92.15\t19.56\n86.2\t18.35\n78.44\t33.81\n77.98\t25.22\n140.5\t22.07\n159.8\t26.6\n72.42\t12.35\n92.04\t13.37\n129.8\t20.71\n84.16\t15.45\n86.82\t18.07\n76.51\t20.22\n142.1\t19.97\n138.1\t20.66\n71.79\t19.12\n90.14\t17.2\n86.04\t29.29\n112.0\t14.93\n86.57\t16.17\n69.05\t12.87\n67.84\t13.9\n104.3\t22.55\n88.1\t29.43\n59.16\t24.54\n97.65\t24.04\n152.4\t16.4\n87.22\t21.35\n115.7\t21.59\n110.3\t15.79\n109.4\t15.24\n106.4\t15.56\n145.4\t17.12\n79.93\t15.39\n76.25\t13.08\n104.6\t16.95\n75.39\t15.11\n139.5\t19.32\n75.4\t17.48\n162.7\t27.81\n80.88\t14.93\n214.0\t31.12\n84.7\t14.02\n85.1\t18.14\n81.23\t10.72\n113.7\t21.88\n70.89\t14.71\n92.94\t21.57\n97.11\t28.21\n172.0\t22.28\n89.0\t17.92\n69.92\t21.28\n132.8\t25.42\n91.29\t25.25\n85.08\t29.97\n127.3\t20.2\n69.47\t13.14\n205.7\t21.6\n86.12\t24.44\n62.86\t21.94\n123.8\t23.24\n122.4\t21.53\n177.4\t24.81\n90.24\t19.31\n89.71\t16.52\n102.9\t24.02\n85.51\t18.33\n180.9\t20.2\n121.4\t17.57\n97.67\t15.34\n86.97\t12.39\n139.2\t18.58\n177.0\t26.67\n170.3\t21.56\n65.74\t15.91\n165.3\t23.56\n78.28\t18.95\n152.4\t18.18\n105.8\t18.17\n56.65\t18.6\n124.3\t15.51\n86.54\t18.9\n87.82\t18.84\n97.96\t15.15\n88.33\t17.72\n85.07\t17.57\n81.41\t14.98\n97.9\t15.79\n91.06\t25.13\n80.78\t15.62\n92.74\t22.44\n85.13\t20.04\n76.38\t19.83\n57.17\t25.49\n88.84\t28.92\n136.5\t17.89\n139.9\t20.25\n113.1\t20.28\n59.9\t11.79\n128.8\t19.65\n107.5\t22.76\n85.56\t18.54\n102.8\t10.89\n76.53\t13.39\n86.6\t17.94\n116.6\t19.63\n84.42\t17.19\n128.5\t23.75\n180.2\t32.47\n98.27\t21.25\n83.12\t18.45\n97.66\t21.84\n126.9\t18.77\n70.1\t23.09\n84.48\t16.85\n99.21\t19.35\n114.2\t14.74\n117.2\t18.29\n91.76\t18.83\n96.42\t17.18\n79.93\t16.83\n83.69\t21.98\n69.35\t18.32\n68.03\t28.2\n93.22\t15.73\n127.1\t13.23\n76.08\t17.12\n99.43\t18.68\n54.49\t25.44\n69.57\t27.61\n151.7\t24.8\n149.3\t25.27\n105.5\t21.81\n69.86\t14.88\n91.36\t10.94\n104.5\t14.76\n206.8\t19.67\n91.99\t16.39\n66.53\t11.97\n132.9\t20.74\n125.0\t11.89\n79.57\t17.39\n96.05\t18.6\n99.71\t13.16\n206.0\t26.97\n159.8\t19.82\n89.27\t16.21\n92.12\t15.7\n171.1\t18.9\n81.6\t14.08\n76.91\t19.86\n79.67\t16.03\n93.76\t16.95\n84.93\t12.96\n97.33\t18.89\n66.61\t21.68\n74.35\t16.62\n133.3\t16.85\n152.1\t27.15\n112.1\t20.53\n143.4\t20.56\n109.8\t15.7\n74.32\t15.68\n78.78\t14.44\n67.88\t19.59\n112.0\t23.95\n134.9\t15.05\n150.6\t17.6\n62.06\t20.98\n150.1\t16.15\n97.59\t18.3\n83.99\t21.26\n100.3\t17.21\n129.0\t18.05\n120.3\t19.46\n72.01\t14.71\n86.65\t15.9\n117.7\t16.68\n101.1\t13.9\n161.7\t21.46\n130.9\t17.08\n76.51\t20.39\n85.56\t18.4\n88.13\t19.89\n140.9\t18.87\n82.08\t14.78\n83.09\t14.96\n161.2\t21.78\n79.73\t14.93\n90.72\t17.46\n110.2\t22.11\n88.87\t17.67\n84.48\t24.89\n251.2\t26.27\n101.2\t16.62\n83.24\t12.83\n117.7\t23.95\n63.3\t13.1\n113.5\t24.99\n66.5\t27.88\n108.8\t22.61\n160.5\t25.11\n57.26\t16.84\n119.1\t22.15\n170.3\t23.97\n123.5\t19.83\n71.68\t16.99\n113.2\t24.69\n82.66\t17.31\n84.08\t12.74\n73.2\t15.15\n106.4\t23.12\n67.08\t17.27\n71.94\t17.53\n102.5\t27.85\n163.1\t19.33\n94.44\t16.82\n92.2\t20.76\n158.8\t23.86\n68.62\t18.9\n84.53\t19.02\n83.61\t17.07\n160.0\t26.83\n87.36\t22.72\n80.79\t14.83\n110.1\t29.81\n125.4\t22.53\n145.4\t28.03\n100.4\t26.99\n82.04\t14.59\n95.29\t20.54\n81.25\t14.69\n101.9\t18.75\n107.4\t25.42\n105.9\t22.68\n124.1\t27.54\n119.4\t18.7\n102.8\t18.66\n65.59\t13.86\n91.88\t18.0\n156.1\t23.03\n89.0\t20.76\n148.2\t18.91\n97.17\t15.92\n78.07\t12.96\n58.36\t14.45\n89.04\t21.41\n130.0\t20.26\n125.9\t20.25\n141.2\t39.28\n108.1\t17.05\n78.27\t13.04\n87.4\t13.12\n70.76\t18.61\n81.76\t17.0\n143.2\t21.0\n119.4\t19.22\n93.85\t18.02\n95.23\t17.48\n86.0\t17.26\n85.09\t21.17\n89.61\t17.68\n105.9\t17.66\n82.68\t18.36\n122.1\t19.51\n103.9\t20.21\n101.7\t14.7\n87.22\t12.27\n92.48\t28.06\n82.28\t23.93\n123.4\t20.13\n136.1\t23.98\n89.88\t14.63\n111.8\t23.84\n84.53\t20.97\n82.14\t17.84\n107.0\t19.65\n105.9\t16.39\n77.79\t14.97\n88.91\t20.18\n73.07\t18.06\n62.25\t18.22\n99.48\t22.54\n98.84\t17.02\n94.11\t15.6\n178.6\t28.77\n195.9\t20.99\n78.27\t19.96\n82.69\t18.16\n71.53\t16.18\n87.38\t14.23\n229.3\t17.46\n199.5\t17.25\n96.59\t13.72\n149.6\t21.02\n68.73\t21.7\n146.0\t19.54\n108.1\t19.34\n95.1\t18.22\n88.83\t18.03\n95.29\t18.17\n113.3\t20.52\n94.52\t13.17\n99.17\t20.7\n100.2\t27.15\n184.6\t10.38\n136.8\t20.68\n161.4\t26.47\n99.0\t22.3\n114.6\t23.94\n96.66\t15.86\n68.81\t19.94\n72.62\t20.19\n148.7\t25.12\n86.26\t14.65\n146.6\t15.94\n123.5\t20.11\n101.7\t26.86\n113.7\t12.91\n110.4\t13.47\n83.85\t15.04\n119.8\t17.27\n68.09\t15.67\n79.29\t18.89\n81.39\t24.49\n150.2\t19.66\n161.1\t21.43\n121.2\t25.74\n195.0\t21.9\n102.2\t23.29\n87.64\t10.91\n157.1\t21.08\n145.3\t21.97\n168.2\t20.52\n115.0\t20.13\n104.4\t19.24\n92.82\t17.31\n108.5\t13.66\n86.92\t13.44\n97.58\t23.23\n75.19\t29.37\n158.8\t17.77\n186.8\t22.15\n132.7\t17.88\n82.98\t21.6\n67.03\t21.01\n211.7\t24.91\n82.96\t12.84\n64.48\t15.83\n91.38\t13.29\n91.93\t16.58\n174.9\t18.15\n88.18\t22.22\n118.6\t23.21\n158.3\t22.14\n73.47\t15.46\n87.16\t18.19\n143.7\t23.2\n135.1\t24.48\n101.7\t19.73\n92.0\t15.82\n92.8\t13.32\n71.98\t17.53\n79.62\t14.07\n129.3\t23.29\n87.65\t14.09\n96.31\t18.29\n88.12\t12.17\n102.3\t16.94\n83.51\t21.54\n100.9\t20.74\n94.94\t14.06\n146.4\t17.52\n113.8\t19.07\n88.52\t17.56\n71.12\t16.35\n128.7\t30.62\n152.5\t21.25\n99.7\t14.36\n133.5\t21.59\n96.08\t16.34\n78.0\t19.04\n141.3\t26.29\n109.5\t19.77\n87.54\t21.53\n124.9\t19.48\n107.1\t18.77\n87.36\t22.22\n86.7\t13.06\n90.81\t16.33\n85.22\t18.94\n114.2\t15.51\n98.0\t23.77\n126.3\t33.56\n79.46\t17.36\n109.1\t19.1\n60.9\t14.4\n171.1\t21.51\n202.4\t24.27\n89.02\t19.07\n104.5\t13.21\n99.66\t16.16\n89.69\t16.17\n79.26\t21.41\n113.9\t19.62\n139.8\t25.0\n71.11\t18.1\n95.78\t17.64\n163.2\t21.24\n79.15\t18.61\n87.0\t20.02\n71.08\t16.58\n179.1\t25.09\n98.87\t20.38\n96.09\t15.71\n116.2\t21.72\n83.67\t18.24\n65.5\t17.33\n87.78\t15.65\n108.6\t24.98\n63.34\t15.76\n129.7\t21.54\n108.6\t15.18\n184.2\t22.04\n220.8\t21.87\n111.6\t22.29\n188.5\t18.47\n90.67\t23.97\n144.9\t23.5\n162.3\t27.06\n77.37\t14.16\n88.81\t16.02\n95.48\t12.71\n91.11\t15.21\n111.4\t16.54\n94.22\t18.59\n152.1\t15.1\n79.73\t15.5\n84.11\t14.95\n86.43\t19.04\n95.14\t19.54\n85.07\t28.23\n143.6\t23.33\n112.5\t11.28\n109.7\t16.74\n142.2\t20.58\n101.6\t16.33\n69.1\t19.34\n166.1\t22.39\n152.2\t14.34\n"}]},"apps":[],"jobName":"paragraph_1539663694271_-745717496","id":"20180721-010310_12374789","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:190"},{"text":"%splicemachine\nSELECT WORST_SMOOTHNESS, MEAN_CONCAVITY FROM DEMO.BREAST_CANCER","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":4,"editorMode":"ace/mode/sql","editorHide":false,"fontSize":9,"results":{"0":{"graph":{"mode":"scatterChart","height":300,"optionOpen":false},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"WORST_SMOOTHNESS\tMEAN_CONCAVITY\n0.1791\t0.1578\n0.1324\t0.02956\n0.09701\t0.02562\n0.128\t0.1772\n0.1296\t0.03653\n0.1398\t0.1335\n0.1584\t0.0\n0.1878\t0.169\n0.1223\t0.07135\n0.09711\t0.02881\n0.1045\t0.01947\n0.1491\t0.2487\n0.08822\t0.1103\n0.1243\t0.1682\n0.1777\t0.1695\n0.1515\t0.04831\n0.124\t0.02891\n0.1243\t0.0802\n0.1369\t0.02688\n0.1016\t0.004559\n0.1384\t0.03193\n0.1233\t0.08422\n0.1153\t0.01502\n0.1562\t0.1527\n0.1251\t0.1856\n0.1363\t0.04944\n0.1312\t0.145\n0.1195\t0.03534\n0.1347\t0.06895\n0.178\t0.102\n0.1175\t0.1544\n0.1794\t0.1357\n0.1417\t0.1411\n0.1097\t0.1523\n0.1204\t0.01548\n0.1166\t0.144\n0.1442\t0.1127\n0.139\t0.2077\n0.09387\t0.02398\n0.1389\t0.05253\n0.1193\t0.108\n0.1306\t0.1204\n0.1123\t0.02383\n0.1855\t0.2133\n0.1465\t0.1153\n0.1297\t0.03136\n0.1436\t0.02531\n0.1414\t0.06593\n0.1322\t0.1114\n0.1559\t0.1115\n0.1703\t0.191\n0.1101\t0.04336\n0.1134\t0.09697\n0.105\t0.01997\n0.1298\t0.01288\n0.1223\t0.01583\n0.1281\t0.01765\n0.1418\t0.05397\n0.1015\t0.04721\n0.1105\t0.02556\n0.1343\t0.01923\n0.1206\t0.055\n0.1415\t0.07097\n0.1118\t0.01342\n0.1225\t0.02966\n0.1234\t0.02948\n0.1142\t0.05192\n0.158\t0.05928\n0.1456\t0.04825\n0.1428\t0.05263\n0.1001\t0.0\n0.1139\t0.09251\n0.1654\t0.09366\n0.1401\t0.1097\n0.161\t0.1063\n0.1249\t0.03036\n0.1207\t0.08606\n0.1249\t0.1468\n0.1559\t0.06154\n0.1072\t0.07293\n0.1419\t0.04711\n0.163\t0.1321\n0.1168\t0.08422\n0.1121\t0.06181\n0.1552\t0.118\n0.146\t0.09901\n0.09203\t0.01633\n0.1254\t0.1374\n0.1084\t0.04209\n0.1185\t0.04479\n0.117\t0.01063\n0.1011\t0.01447\n0.1013\t0.001546\n0.1218\t0.1863\n0.1333\t0.0271\n0.1235\t0.06651\n0.146\t0.0\n0.09402\t0.06126\n0.1147\t0.09657\n0.1034\t0.02087\n0.1172\t0.02819\n0.1041\t0.02367\n0.1514\t0.2256\n0.1199\t0.1676\n0.1475\t0.0388\n0.1268\t0.2085\n0.1087\t0.04824\n0.165\t0.3514\n0.1703\t0.1859\n0.1805\t0.1525\n0.1094\t0.0311\n0.1624\t0.1323\n0.1585\t0.1692\n0.1304\t0.06015\n0.1219\t0.02995\n0.1548\t0.03512\n0.1271\t0.03592\n0.1292\t0.4108\n0.1376\t0.2159\n0.1301\t0.05375\n0.1429\t0.04187\n0.1405\t0.06636\n0.09994\t0.004967\n0.1499\t0.02379\n0.1558\t0.09061\n0.1782\t0.1921\n0.09312\t0.01236\n0.1194\t0.04052\n0.159\t0.1478\n0.146\t0.04006\n0.09293\t0.001194\n0.1143\t0.228\n0.1681\t0.1891\n0.1482\t0.1201\n0.1398\t0.008934\n0.1391\t0.09457\n0.1406\t0.0716\n0.1065\t0.05539\n0.1526\t0.04279\n0.1902\t0.0973\n0.185\t0.03332\n0.138\t0.1463\n0.1234\t0.01997\n0.08996\t0.0\n0.1853\t0.2273\n0.1545\t0.2229\n0.1909\t0.1044\n0.1368\t0.1293\n0.1411\t0.07789\n0.1277\t0.09966\n0.1862\t0.2071\n0.1503\t0.1457\n0.119\t0.03503\n0.1341\t0.01982\n0.1216\t0.02602\n0.1521\t0.001597\n0.1381\t0.1036\n0.09527\t0.05774\n0.1223\t0.1554\n0.1389\t0.04328\n0.1401\t0.1367\n0.1036\t0.02245\n0.1137\t0.02685\n0.1092\t0.01367\n0.1426\t0.1799\n0.136\t0.03581\n0.114\t0.03344\n0.1108\t0.01271\n0.1502\t0.281\n0.124\t0.03211\n0.1126\t0.00247\n0.1436\t0.1204\n0.1289\t0.02772\n0.09422\t0.0\n0.1009\t0.03649\n0.2006\t0.1188\n0.1342\t0.231\n0.1768\t0.04515\n0.1103\t0.03996\n0.1181\t0.03299\n0.1525\t0.1425\n0.1247\t0.2107\n0.1021\t6.92E-4\n0.1176\t0.03372\n0.1115\t0.03102\n0.1688\t0.0707\n0.1696\t0.4268\n0.1411\t0.1539\n0.1478\t0.09293\n0.1385\t0.03987\n0.1234\t0.08169\n0.1536\t0.3523\n0.1353\t0.1272\n0.1504\t0.01652\n0.1211\t0.2712\n0.1213\t0.06387\n0.1518\t0.1626\n0.09445\t0.02475\n0.1347\t0.0\n0.1435\t0.1204\n0.1289\t0.00751\n0.1298\t0.02688\n0.1275\t0.04249\n0.1432\t0.04783\n0.1453\t0.02783\n0.1327\t0.06335\n0.1072\t0.01055\n0.1218\t0.01206\n0.1332\t0.05115\n0.1256\t0.01714\n0.1402\t0.08175\n0.1108\t0.005067\n0.1256\t0.0\n0.1227\t0.06195\n0.1396\t0.09954\n0.1338\t0.149\n0.153\t0.09847\n0.1733\t0.02061\n0.15\t0.09769\n0.1257\t0.1122\n0.1184\t0.02643\n0.1313\t0.08842\n0.1367\t0.04635\n0.1217\t0.03885\n0.1401\t0.05858\n0.1323\t0.03809\n0.2226\t0.1558\n0.1408\t0.1145\n0.1287\t0.01462\n0.1183\t0.02638\n0.1005\t0.04072\n0.1365\t0.1948\n0.1143\t0.02495\n0.1104\t0.004473\n0.1288\t0.07107\n0.122\t0.04608\n0.1338\t0.05862\n0.2184\t0.1689\n0.1066\t0.02681\n0.1369\t0.03046\n0.1303\t0.03614\n0.09794\t0.01993\n0.111\t0.01541\n0.1326\t0.05835\n0.09862\t0.04445\n0.1662\t0.04063\n0.1425\t0.05385\n0.1596\t0.09252\n0.1384\t0.05999\n0.1037\t0.2065\n0.1641\t0.1683\n0.1503\t0.08259\n0.1275\t0.01084\n0.1451\t0.06877\n0.1006\t0.03261\n0.1701\t0.4264\n0.1025\t0.08092\n0.1234\t0.0\n0.1418\t0.1855\n0.1531\t0.2032\n0.1356\t0.02353\n0.1426\t0.08005\n0.1311\t0.03888\n0.1481\t0.195\n0.171\t0.2417\n0.1256\t0.039\n0.09926\t0.1115\n0.1495\t0.2197\n0.1001\t0.01123\n0.1424\t0.005006\n0.1531\t0.02587\n0.1213\t0.02181\n0.161\t0.079\n0.1428\t0.0858\n0.1086\t0.03735\n0.103\t0.01369\n0.1263\t0.109\n0.16\t0.1007\n0.1153\t0.05063\n0.1309\t0.117\n0.1354\t0.05526\n0.1419\t0.0233\n0.1345\t0.06737\n0.1265\t0.005025\n0.1131\t0.09938\n0.1255\t0.09875\n0.1679\t0.1974\n0.1639\t0.03\n0.1478\t0.1684\n0.1339\t0.03974\n0.1699\t0.05133\n0.1157\t0.0142\n0.1314\t0.09447\n0.08774\t0.0515\n0.1216\t0.02363\n0.1096\t0.03844\n0.1491\t0.0755\n0.1376\t0.0786\n0.1228\t0.09042\n0.1416\t0.1266\n0.1335\t0.08448\n0.1038\t0.00186\n0.105\t0.0683\n0.1434\t0.113\n0.1166\t9.737E-4\n0.1293\t0.01171\n0.1327\t0.09799\n0.1095\t0.03546\n0.09534\t0.0739\n0.1077\t0.06859\n0.1068\t0.01402\n0.1311\t0.05441\n0.1357\t0.3635\n0.09384\t0.02224\n0.09439\t0.007173\n0.1732\t0.203\n0.1641\t0.02565\n0.134\t0.1009\n0.1073\t0.0\n0.1651\t0.2128\n0.1491\t0.2319\n0.1297\t0.01588\n0.164\t0.2135\n0.1639\t0.3754\n0.1551\t0.17\n0.1467\t0.04334\n0.1471\t0.05285\n0.1413\t0.02031\n0.1275\t0.01972\n0.1076\t0.0\n0.1533\t0.1981\n0.1415\t0.01756\n0.1406\t0.01768\n0.1081\t0.1103\n0.1497\t0.1379\n0.08567\t0.00725\n0.1116\t0.06574\n0.1347\t0.2283\n0.1221\t0.1975\n0.1222\t0.007756\n0.09958\t0.008306\n0.1278\t0.1641\n0.08799\t0.07943\n0.112\t0.02712\n0.1148\t0.04686\n0.1419\t0.2733\n0.1401\t0.1698\n0.1017\t0.03476\n0.1352\t0.05308\n0.1118\t0.018\n0.1073\t0.06726\n0.1624\t0.04201\n0.106\t0.04105\n0.1026\t0.1029\n0.1678\t0.1639\n0.1637\t0.1218\n0.1786\t0.1226\n0.09836\t0.05988\n0.1289\t0.03889\n0.119\t0.1465\n0.1287\t0.1065\n0.1021\t0.09271\n0.1312\t0.04894\n0.1171\t0.00309\n0.1162\t0.0\n0.09388\t0.03112\n0.1111\t0.0695\n0.1552\t0.1147\n0.1365\t0.1417\n0.1512\t0.09789\n0.1358\t0.03265\n0.09616\t0.0226\n0.1413\t0.02297\n0.08409\t0.01342\n0.1449\t0.1508\n0.155\t0.2914\n0.1368\t0.04392\n0.1427\t0.05892\n0.1244\t0.02853\n0.1426\t0.02555\n0.145\t0.07741\n0.1226\t0.04069\n0.1342\t0.03367\n0.1377\t0.2236\n0.1216\t0.06824\n0.1139\t0.03416\n0.1292\t0.02958\n0.1072\t0.02987\n0.1298\t0.1112\n0.1464\t0.07395\n0.1634\t0.2417\n0.1494\t0.06592\n0.1851\t0.1128\n0.1557\t0.04591\n0.114\t0.0249\n0.08949\t0.3003\n0.1386\t0.1138\n0.1076\t0.02251\n0.1358\t0.06843\n0.1301\t0.1307\n0.07117\t0.0\n0.1349\t0.08705\n0.1276\t0.03554\n0.1278\t0.04705\n0.1281\t0.1784\n0.1272\t0.2195\n0.1028\t0.09274\n0.1144\t0.03344\n0.1402\t0.06726\n0.1142\t0.03738\n0.153\t0.3368\n0.1363\t0.1168\n0.1166\t0.05077\n0.1873\t0.3189\n0.1526\t0.02047\n0.1665\t0.2133\n0.1089\t0.08817\n0.1282\t0.04859\n0.1208\t0.02916\n0.1533\t0.08017\n0.1574\t0.1445\n0.1394\t0.101\n0.1264\t0.03688\n0.1241\t0.04462\n0.1622\t0.3001\n0.1789\t0.1722\n0.1509\t0.1657\n0.1162\t0.04751\n0.1648\t0.1267\n0.1536\t0.1169\n0.1316\t0.006829\n0.13\t0.06476\n0.1275\t0.2545\n0.1424\t0.0371\n0.1124\t0.1193\n0.1415\t0.1793\n0.1785\t0.1085\n0.1222\t0.05892\n0.1297\t0.05724\n0.1037\t0.01053\n0.1765\t0.2448\n0.1467\t0.01103\n0.1118\t0.02399\n0.09545\t0.01974\n0.1054\t0.1155\n0.1498\t0.106\n0.166\t0.1235\n0.1294\t0.2448\n0.1312\t0.0839\n0.1374\t0.02606\n0.1517\t0.1522\n0.139\t0.1594\n0.1368\t0.1572\n0.1201\t0.101\n0.1064\t0.02995\n0.1276\t0.03609\n0.1223\t0.08222\n0.1521\t0.03781\n0.1216\t0.02974\n0.09267\t0.0\n0.1238\t0.0869\n0.1512\t0.1479\n0.1446\t0.1354\n0.1085\t0.01657\n0.1548\t0.02172\n0.1573\t0.3339\n0.1431\t0.04196\n0.1724\t0.04132\n0.1427\t0.02855\n0.1385\t0.1659\n0.1438\t0.2508\n0.08125\t0.001595\n0.1316\t0.1697\n0.1178\t0.164\n0.1341\t0.006643\n0.1347\t0.1548\n0.1504\t0.3176\n0.1315\t0.05699\n0.09983\t0.1362\n0.1128\t0.001461\n0.1547\t0.038\n0.1402\t0.02511\n0.08864\t0.04505\n0.1415\t0.1811\n0.1026\t0.06839\n0.09329\t0.04057\n0.1314\t0.0236\n0.1218\t0.03346\n0.09457\t0.08777\n0.1351\t0.1085\n0.1393\t0.05786\n0.1412\t0.1491\n0.1246\t0.07486\n0.1349\t0.05282\n0.1285\t0.01012\n0.1417\t0.255\n0.1444\t0.1974\n0.144\t0.06664\n0.1563\t0.1348\n0.1089\t0.01857\n0.129\t0.03709\n0.1392\t0.1937\n0.1431\t0.09388\n0.15\t0.03328\n0.1546\t0.1466\n0.0997\t0.0905\n0.1452\t0.0537\n0.1162\t0.009193\n0.1097\t0.03873\n0.128\t0.02669\n0.1136\t0.06505\n0.09368\t0.04697\n0.1883\t0.1751\n0.1359\t0.05929\n0.1313\t0.0594\n0.09861\t0.003681\n0.1592\t0.2565\n0.1515\t0.2308\n0.1096\t0.103\n0.1126\t0.03393\n0.08484\t0.02045\n0.1172\t0.03296\n0.1282\t0.008955\n0.1613\t0.1126\n0.1528\t0.1655\n0.1388\t0.01479\n0.1199\t0.04548\n0.1464\t0.2188\n0.1483\t0.04302\n0.155\t0.042\n0.1461\t0.04358\n0.1407\t0.3174\n0.2098\t0.2414\n0.1312\t0.04568\n0.1446\t0.1319\n0.1144\t0.01972\n0.1482\t0.313\n0.1377\t0.04151\n0.1265\t0.08625\n0.1179\t0.09263\n0.1395\t0.1043\n0.1316\t0.08487\n0.1228\t0.1324\n0.1472\t0.2871\n0.1737\t0.1385\n0.1142\t0.3201\n0.1227\t0.05438\n0.1463\t0.2049\n0.1522\t0.1519\n0.1259\t0.001487\n0.1483\t0.06155\n0.09023\t0.002758\n0.1256\t0.01994\n0.1294\t0.08007\n0.1343\t0.09603\n0.1192\t0.1932\n0.1102\t0.1007\n0.1048\t0.02109\n0.1249\t0.05485\n0.1214\t0.01797\n0.1208\t0.04055\n0.1207\t0.2136\n0.1541\t0.1191\n0.1135\t0.07721\n0.1492\t0.1569\n0.1264\t0.01752\n0.1199\t0.02337\n0.141\t0.2439\n0.1374\t0.198\n"}]},"apps":[],"jobName":"paragraph_1539663694272_1977204368","id":"20180721-010350_285979566","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:191"},{"text":"%splicemachine\nSELECT WORST_RADIUS, LABEL FROM DEMO.BREAST_CANCER\n","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"sql","editOnDblClick":false},"colWidth":4,"editorMode":"ace/mode/sql","editorHide":false,"fontSize":9,"results":{"0":{"graph":{"mode":"pieChart","height":300,"optionOpen":false,"setting":{"multiBarChart":{},"pieChart":{}},"commonSetting":{},"keys":[{"name":"LABEL","index":1,"aggr":"sum"}],"groups":[],"values":[{"name":"WORST_RADIUS","index":0,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"WORST_RADIUS\tLABEL\n15.47\t0\n10.23\t1\n13.3\t1\n20.6\t0\n13.46\t1\n22.93\t0\n7.93\t1\n18.81\t0\n17.5\t1\n15.34\t1\n15.98\t1\n26.68\t0\n19.76\t0\n18.07\t0\n15.2\t0\n11.48\t1\n19.85\t0\n19.96\t0\n13.06\t1\n14.73\t1\n13.71\t1\n10.75\t1\n15.11\t1\n25.37\t0\n20.82\t0\n12.4\t1\n16.46\t1\n15.66\t1\n15.8\t1\n13.36\t1\n13.78\t1\n16.01\t0\n23.73\t0\n23.23\t0\n13.03\t1\n23.69\t0\n22.88\t0\n18.07\t0\n14.99\t0\n18.1\t0\n24.86\t0\n16.21\t0\n13.34\t1\n20.19\t0\n22.52\t0\n14.16\t1\n11.6\t1\n20.11\t0\n23.36\t0\n16.86\t0\n19.59\t0\n13.94\t1\n20.39\t0\n15.5\t1\n13.5\t1\n12.61\t1\n15.53\t1\n11.92\t1\n9.981\t1\n14.84\t1\n11.38\t1\n17.71\t1\n12.64\t1\n15.63\t1\n14.34\t1\n11.14\t1\n16.46\t1\n13.57\t1\n15.05\t1\n11.62\t1\n11.66\t1\n18.98\t0\n17.06\t0\n29.17\t0\n15.53\t0\n12.84\t1\n9.733\t1\n24.56\t0\n10.76\t1\n20.58\t0\n14.49\t0\n9.092\t1\n20.05\t0\n12.37\t1\n18.33\t0\n15.75\t0\n12.08\t1\n14.39\t1\n17.91\t0\n14.98\t1\n14.67\t1\n16.46\t1\n13.07\t1\n22.75\t0\n12.02\t1\n16.97\t1\n10.17\t1\n14.4\t1\n15.14\t1\n14.91\t1\n15.05\t1\n13.6\t1\n23.96\t0\n30.79\t0\n14.45\t1\n24.3\t0\n12.02\t1\n25.74\t0\n15.49\t0\n26.46\t0\n15.93\t0\n26.14\t0\n23.32\t0\n13.83\t1\n11.54\t1\n12.82\t1\n13.33\t1\n11.02\t1\n23.14\t0\n17.8\t0\n14.44\t1\n13.25\t1\n12.36\t1\n12.25\t1\n21.58\t0\n23.72\t0\n11.37\t1\n14.19\t1\n19.28\t0\n13.06\t1\n13.72\t1\n10.85\t1\n21.2\t0\n21.08\t0\n11.21\t1\n12.36\t1\n13.12\t1\n17.18\t1\n13.32\t1\n10.28\t1\n10.57\t1\n15.29\t0\n13.87\t1\n9.456\t1\n15.09\t0\n22.25\t0\n12.84\t0\n17.87\t0\n16.57\t0\n16.34\t1\n16.31\t0\n22.25\t0\n12.32\t1\n11.99\t1\n16.11\t1\n11.87\t1\n20.42\t0\n11.48\t1\n24.47\t0\n12.65\t1\n32.49\t0\n13.31\t1\n13.36\t0\n12.34\t1\n17.73\t0\n10.88\t1\n14.2\t1\n14.69\t1\n26.23\t0\n14.1\t1\n11.11\t1\n20.38\t0\n14.35\t1\n13.45\t1\n19.18\t0\n10.6\t1\n29.92\t0\n12.98\t1\n9.845\t1\n19.19\t0\n17.62\t0\n24.09\t0\n14.23\t1\n14.11\t1\n16.11\t1\n13.14\t1\n26.02\t0\n18.55\t0\n14.77\t1\n13.5\t1\n21.31\t0\n25.12\t0\n25.73\t0\n10.51\t1\n25.58\t0\n11.88\t1\n23.79\t0\n16.22\t1\n8.952\t1\n18.76\t0\n13.64\t1\n13.75\t1\n14.54\t1\n13.56\t1\n13.05\t1\n12.13\t1\n15.27\t1\n14.34\t1\n11.94\t1\n14.17\t1\n13.16\t1\n11.93\t1\n9.077\t1\n13.89\t1\n20.42\t0\n21.31\t0\n17.38\t0\n9.507\t1\n19.77\t0\n16.43\t0\n13.29\t1\n15.7\t1\n11.92\t1\n13.59\t1\n17.98\t0\n13.01\t1\n19.2\t0\n27.9\t0\n15.33\t1\n12.97\t1\n14.8\t1\n18.55\t0\n10.93\t1\n13.34\t1\n14.42\t1\n17.27\t1\n18.13\t1\n13.24\t0\n14.92\t1\n12.41\t1\n12.76\t1\n10.94\t1\n10.67\t1\n14.09\t1\n19.82\t1\n11.69\t1\n15.11\t1\n8.678\t1\n10.84\t1\n20.96\t0\n20.27\t0\n16.23\t0\n11.02\t1\n14.08\t1\n16.36\t1\n28.4\t0\n14.26\t1\n10.62\t1\n20.47\t0\n18.79\t0\n12.57\t1\n14.97\t1\n15.34\t1\n31.01\t0\n25.28\t0\n13.9\t1\n13.9\t1\n25.93\t0\n12.85\t1\n11.98\t1\n12.51\t1\n14.73\t1\n12.84\t1\n14.8\t1\n9.965\t1\n11.68\t1\n20.38\t0\n22.96\t0\n16.45\t1\n21.53\t0\n17.32\t1\n11.24\t1\n12.26\t1\n10.65\t1\n16.84\t0\n20.01\t0\n22.82\t0\n9.565\t1\n22.39\t0\n15.1\t1\n13.01\t1\n15.49\t1\n19.92\t0\n18.22\t1\n11.35\t1\n13.35\t1\n17.77\t0\n14.98\t1\n24.22\t0\n19.85\t0\n11.69\t1\n13.5\t1\n13.46\t1\n21.84\t0\n12.76\t1\n12.81\t1\n24.31\t0\n12.09\t1\n13.74\t1\n16.76\t1\n13.82\t1\n12.98\t1\n36.04\t0\n15.14\t1\n13.19\t1\n17.11\t0\n9.473\t1\n16.22\t1\n10.49\t1\n15.03\t0\n23.15\t0\n8.964\t1\n17.67\t0\n23.37\t0\n18.23\t0\n11.05\t1\n16.89\t0\n12.78\t1\n13.14\t1\n11.54\t1\n15.74\t0\n10.42\t1\n11.17\t1\n15.75\t1\n25.7\t0\n14.91\t1\n13.24\t1\n23.68\t0\n10.06\t1\n13.35\t1\n13.28\t1\n24.19\t0\n12.57\t1\n12.68\t1\n17.26\t0\n16.35\t0\n21.53\t0\n15.4\t1\n12.4\t1\n14.5\t1\n12.45\t1\n15.35\t1\n16.51\t1\n15.48\t1\n17.46\t0\n16.82\t0\n15.67\t0\n10.01\t1\n14.24\t1\n24.22\t0\n13.33\t1\n22.32\t0\n14.48\t1\n12.36\t1\n9.262\t1\n13.75\t1\n19.8\t0\n19.56\t0\n22.51\t0\n16.39\t0\n12.32\t1\n13.62\t1\n11.06\t1\n12.9\t1\n20.99\t0\n17.36\t0\n14.29\t1\n14.18\t1\n13.45\t1\n13.05\t1\n12.88\t1\n16.43\t1\n12.77\t1\n17.39\t0\n16.01\t1\n15.61\t1\n13.61\t1\n14.37\t1\n12.48\t1\n19.07\t0\n20.88\t0\n13.76\t1\n17.09\t0\n13.11\t1\n12.83\t1\n15.3\t1\n16.11\t1\n11.95\t1\n13.32\t1\n11.26\t1\n9.968\t1\n14.55\t1\n15.14\t1\n14.85\t1\n25.05\t0\n28.19\t0\n11.86\t1\n12.68\t1\n11.28\t1\n13.72\t1\n33.13\t0\n30.75\t0\n14.24\t1\n20.8\t0\n10.85\t1\n22.03\t0\n16.3\t1\n14.9\t1\n13.34\t1\n14.38\t1\n16.41\t0\n14.62\t1\n15.05\t1\n15.3\t1\n25.38\t0\n20.96\t0\n24.15\t0\n15.15\t1\n17.31\t0\n15.53\t1\n10.92\t1\n11.16\t1\n22.63\t0\n13.15\t1\n22.03\t0\n17.79\t0\n15.65\t0\n17.38\t1\n16.77\t1\n13.2\t1\n17.73\t0\n10.75\t1\n12.36\t1\n12.44\t1\n23.06\t0\n24.54\t0\n18.51\t0\n27.66\t0\n15.79\t0\n13.8\t1\n23.17\t0\n22.66\t0\n25.68\t0\n15.44\t1\n16.41\t1\n14.06\t1\n16.76\t1\n13.45\t1\n15.35\t1\n11.92\t1\n24.99\t0\n27.32\t0\n20.21\t0\n12.98\t1\n10.41\t1\n30.0\t0\n13.06\t1\n9.628\t1\n13.34\t1\n13.74\t0\n26.73\t0\n14.0\t1\n16.08\t0\n23.24\t0\n11.52\t1\n12.58\t1\n19.85\t0\n20.92\t0\n15.77\t1\n14.41\t1\n14.04\t1\n11.16\t1\n12.12\t1\n19.38\t0\n13.13\t1\n14.13\t1\n13.65\t1\n16.31\t1\n12.79\t1\n14.8\t1\n14.83\t1\n22.75\t0\n17.58\t0\n13.5\t1\n11.25\t1\n17.52\t0\n23.57\t0\n15.11\t1\n20.01\t0\n14.67\t1\n12.33\t1\n20.33\t0\n16.33\t0\n13.67\t1\n19.26\t0\n16.25\t1\n13.58\t1\n13.63\t1\n13.88\t1\n13.3\t1\n16.41\t1\n15.01\t1\n18.49\t0\n12.4\t1\n16.25\t1\n9.699\t1\n25.3\t0\n30.67\t0\n13.37\t1\n16.2\t1\n15.51\t1\n13.86\t1\n12.36\t1\n17.04\t0\n21.44\t0\n11.15\t1\n14.96\t1\n23.86\t0\n12.47\t1\n13.35\t1\n10.83\t1\n24.29\t0\n14.91\t0\n14.5\t1\n15.89\t0\n13.1\t1\n10.31\t1\n13.67\t1\n16.99\t0\n9.414\t1\n19.47\t0\n15.85\t1\n28.01\t0\n33.12\t0\n16.39\t0\n28.11\t0\n14.2\t1\n21.65\t0\n24.33\t0\n12.2\t1\n13.74\t1\n14.97\t1\n13.75\t1\n16.67\t1\n14.19\t1\n22.69\t0\n12.04\t1\n13.18\t1\n13.07\t1\n14.45\t1\n13.09\t1\n21.57\t0\n17.01\t1\n16.76\t1\n21.86\t0\n15.85\t1\n10.93\t1\n25.45\t0\n22.54\t0\n"}]},"apps":[],"jobName":"paragraph_1539663694274_-1097549968","id":"20180721-010352_1630041600","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:192"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Importing Your Data</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Importing Data into Splice Machine</span></b><br><br>The most ubiquitous file format for machine learning has traditionally been a CSV file. CSV files don't give you any of the awesome features that Splice Machine does, so we need to import our CSV file into a Splice Machine table. Here are some steps on how to do that: <br><br><ol><li>Upload your CSV file into an S3 bucket and give your cluster permission to access it via IAM. You can do this with the \"reconfigure\" option in the Cloud UI.</li><li>Using the CREATE TABLE command, either in the SQL Shell or in the %splicemachine intepreter, create a table that conforms to the CSV's schema.</i><li>In the Splice Machine intepreter (in Zeppelin), use the command CALL SYSCS_UTIL.IMPORT_DATA stored procedure. You can read more about this in our <a href='https://doc.splicemachine.com/sqlref_sysprocs_importdata.html'>documentation</a><footer>-Looking forward to helping you, your friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Importing Your Data</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Importing Data into Splice Machine</span></b><br><br>The most ubiquitous file format for machine learning has traditionally been a CSV file. CSV files don't give you any of the awesome features that Splice Machine does, so we need to import our CSV file into a Splice Machine table. Here are some steps on how to do that: <br><br><ol><li>Upload your CSV file into an S3 bucket and give your cluster permission to access it via IAM. You can do this with the \"reconfigure\" option in the Cloud UI.</li><li>Using the CREATE TABLE command, either in the SQL Shell or in the %splicemachine intepreter, create a table that conforms to the CSV's schema.</i><li>In the Splice Machine intepreter (in Zeppelin), use the command CALL SYSCS_UTIL.IMPORT_DATA stored procedure. You can read more about this in our <a href='https://doc.splicemachine.com/sqlref_sysprocs_importdata.html'>documentation</a><footer>-Looking forward to helping you, your friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694275_-551041858","id":"20180721-193501_694136675","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:193"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Connecting to your database</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Got the data imported? Awesome. Let's establish a connection to your database so we can use the table data for machine learning. To connect, we will use a protocol called JDBC (a Java based database connection protocol). We know this sounds complicated, but we take care of all of this stuff under the covers. <br><br>What we need from you is your JDBC connection string, which can be found on the bottom right of your Splice Machine Cloud UI. Make sure you add a user= and password= parameters to the end of the string. These arguments should be semicolon (;) sepperated with no spaces in between.<br><br>For example, one might look like: <br>jdbc:splice://amritsaccount-mlworkflow.splicemachine-qa.io:1527/splicedb;ssl=basic;user=▒▒▒▒▒▒▒▒▒▒;password=▒▒▒▒▒▒▒▒▒▒<footer>-Great Job, your friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Connecting to your database</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Got the data imported? Awesome. Let's establish a connection to your database so we can use the table data for machine learning. To connect, we will use a protocol called JDBC (a Java based database connection protocol). We know this sounds complicated, but we take care of all of this stuff under the covers. <br><br>What we need from you is your JDBC connection string, which can be found on the bottom right of your Splice Machine Cloud UI. Make sure you add a user= and password= parameters to the end of the string. These arguments should be semicolon (;) sepperated with no spaces in between.<br><br>For example, one might look like: <br>jdbc:splice://amritsaccount-mlworkflow.splicemachine-qa.io:1527/splicedb;ssl=basic;user=▒▒▒▒▒▒▒▒▒▒;password=▒▒▒▒▒▒▒▒▒▒<footer>-Great Job, your friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694275_-1178224996","id":"20180721-200925_362344941","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:194"},{"text":"%spark.pyspark\n\njdbc_url = z.input('Your JDBC URL')\n# import re\n# with open('login.txt') as f:\n#     for l in f:\n#         user, password = l.split(',')\n\n# ajdbc_url = z.input('Your JDBC URL')\n# validation_regex='jdbc:splice:\\/\\/[A-Za-z0-9].*?\\.splicemachine.*?:1527\\/splicedb.*?user=.*?password=.*?$'\n# if re.match(validation_regex, ajdbc_url) is not None:\n#     if '<user>' in ajdbc_url:\n#         jdbc_url = ajdbc_url.replace('<user>', user).replace('<password>', password.strip())\n#     print(\"Success! You entered \\\"\" + ajdbc_url + \"\\\"\")\n# else:\n#     print(\"Try reformatting your URL to conform to the description in the cell above\")\n","user":"splice","dateUpdated":"2018-10-16T04:28:00+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{"Your JDBC URL":"jdbc:splice://nikhilsaccount-machine44.splicemachine-dev.io:1527/splicedb;ssl=basic;user=splice;password=hcBYXM9C"},"forms":{"Your JDBC URL":{"type":"TextBox","name":"Your JDBC URL","displayName":"Your JDBC URL","defaultValue":"","hidden":false,"$$hashKey":"object:8455"}}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1539663694276_-1082367493","id":"20180721-201006_496948656","dateCreated":"2018-10-16T04:21:34+0000","dateStarted":"2018-10-16T04:28:00+0000","dateFinished":"2018-10-16T04:28:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:195"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Introduction to MLFlow</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Now that you supplied your JDBC URL (remember to press enter or your entry will not be saved), we would like to introduce you to MLFlow. Take a look at the Python sample below, and you should be able to understand the basic syntax of how it works.<br><br> <i>Please make sure that any mlflow command takes placeunder the context of start_run with the run UUID parameter specified. This allows for a run in progress to be resumed rather than overwritten</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Introduction to MLFlow</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:25px'>Now that you supplied your JDBC URL (remember to press enter or your entry will not be saved), we would like to introduce you to MLFlow. Take a look at the Python sample below, and you should be able to understand the basic syntax of how it works.<br><br> <i>Please make sure that any mlflow command takes placeunder the context of start_run with the run UUID parameter specified. This allows for a run in progress to be resumed rather than overwritten</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694277_1823211134","id":"20180721-224827_2040261337","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:196"},{"text":"%angular\n<h2 style='font-size:30px; color:grey'>How to use MLFlow Markers</h2>\n<style>\n@import \"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\";\ncode,\n.code,\npre {\n  font-family: 'Source Code Pro';\n  background: #292929;\n  color: #fafafa;\n  font-size: 16px;\n  padding: 0;\n  padding: 10px;\n}\ncode:before,\n.code:before,\npre:before {\n  display: block;\n  margin-left: -3px;\n  margin-top: -3px;\n  padding: 3px;\n  content: attr(data-lang);\n  background:#3071a9;\n  margin-bottom:10px;\n}\ncode .o,\n.code .o,\npre .o {\n  color: orange;\n}\ncode .w,\n.code .w,\npre .w {\n  color: white;\n}\n.py {\n    color:limegreen;\n    font-weight:bold;\n}\n.mlflow {\n    color:skyblue;\n}\ntab {\n    margin-left:4px;\n}\n.string {\n    color:#b5651d;\n}\n</style>\n<pre data-lang='Python' class='prettyprint'>\n<span class='py'>import</span> <span class='mlflow'>mlflow</span>\n<span class='py'>import</span> <span class='mlflow'>mlflow.spark</span>\n<span class='py'>from</span> <span class='mlflow'>splicemachine.context</span> <span class='py'>import</span> <span class='mlflow'>PySpliceContext</span>\n<span class='py'>from</span> <span class='mlflow'>pyspark.classification</span> <span class='py'>import</span> <span class='mlflow'>DecisionTreeClassifier</span>\n<span class='py'>from</span> <span class='mlflow'>pyspark.feature</span> <span class='py'>import</span> <span class='mlflow'>VectorAssembler</span>\n\n<span style='white'># In the below cell, there will be a form field for you to enter your experiment. <br>&nbsp;&nbsp;&nbsp;Upon pressing enter, it will be registered and submitted with MLFlow</span></span><br>\n<span style='color:lightgrey'># PLEASE NOTE: We highly reccomend that you add these markers after your model is working, so you don't fill up your runs with failures.</span></span><br>\n<span style='color:lightgrey'># We will now create a new run, so your model's metadata isn't overwritten</span></span><br>\nmy_run_uuid = <span class='mlflow'>create_new_run()</span><br>\n<span style='color:lightgrey'># +---------CELL i---------+</span></span>\n# ...\n# Now we can log a parameter (for example, a parameter might be the classifier, the number of training/testing samples etc.)\n<span class='py'>with </span><span class='mlflow'>mlflow.start_run(run_uuid=run_uuid):</span>\n    <b># Syntax: <span class='mlflow'>mlflow</span>.log_param(parameter, value). Note value must be a string (you may use the <span class='py'>str()</span> method</b><br>\n    <span class='mlflow'>mlflow</span>.log_param(<span class='string'>\"dataset\"</span>, <span class='string'>\"SPLICE.SHIPPING_02_2018\"</span>)\n\n<span style='color:lightgrey'># +---------CELL i+1---------+</span></span>\n# ..\n<span class='py'>with </span><span class='mlflow'>mlflow.start_run(run_uuid=run_uuid):</span>\n    <span class='mlflow'>mlflow</span>.log_param(<span class='string'>\"preprocessing\"</span>, <span class='string'>\"string indexer, vector assembler\"</span>)\n\n<span style='color:lightgrey'># +---------CELL i + 3---------+</span></span>\n# ..\n<span class='py'>with </span><span class='mlflow'>mlflow.start_run(run_uuid=run_uuid):</span>\n    # Next, we have to log our classifier as an \"artifact\" to MLFlow. This allows us to import it later and predict, \\\n         and it also gives the ability for deploying it to SageMaker or AzureML (experimental)\n    <b># Syntax: <span class='mlflow'>mlflow</span>.spark.log_model(&lt;variable to our trained model&gt;, 'pysparkmodel') # make sure you use the 'pysparkmodel' string as your second parameter!</b>\n    <span class='mlflow'>mlflow</span>.spark.log_model(fitted_decision_tree, <span class='string'>\"pysparkmodel\"</span>)\n\n<span style='color:lightgrey'># +---------CELL i + 4---------+</span></span>\n<span class='py'>with </span><span class='mlflow'>mlflow.start_run(run_uuid=run_uuid):</span>\n    # ...\n    # Lastly, we will log metrics about how well are model performs\n    <b> Syntax: <span class='mlflow'>mlflow</span>.log_metric(metric name, value). Note that value must be an integer or a floating point number</b><br>\n    <span class='mlflow'>mlflow</span>.log_metric(<span class='string'>\"F1 Score\"</span>, model_f1_score)\n    <span class='mlflow'>mlflow</span>.log_metric(<span class='string'>\"Accuracy\"</span>, model_accuracy_score)\n    <span class='mlflow'>mlflow</span>.log_metric(<span class='string'>\"F1 Score\"</span>, model_matthews_corrcoef)\n\n# Congrats 🎉! You made it!\n</pre>\n","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h2 style='font-size:30px; color:grey'>How to use MLFlow Markers</h2>\n<style>\n@import \"https://cdn.rawgit.com/google/code-prettify/master/styles/desert.css\";\ncode,\n.code,\npre {\n  font-family: 'Source Code Pro';\n  background: #292929;\n  color: #fafafa;\n  font-size: 16px;\n  padding: 0;\n  padding: 10px;\n}\ncode:before,\n.code:before,\npre:before {\n  display: block;\n  margin-left: -3px;\n  margin-top: -3px;\n  padding: 3px;\n  content: attr(data-lang);\n  background:#3071a9;\n  margin-bottom:10px;\n}\ncode .o,\n.code .o,\npre .o {\n  color: orange;\n}\ncode .w,\n.code .w,\npre .w {\n  color: white;\n}\n.py {\n    color:limegreen;\n    font-weight:bold;\n}\n.mlflow {\n    color:skyblue;\n}\ntab {\n    margin-left:4px;\n}\n.string {\n    color:#b5651d;\n}\n</style>\n<pre data-lang='Python' class='prettyprint'>\n<span class='py'>import</span> <span class='mlflow'>mlflow</span>\n<span class='py'>import</span> <span class='mlflow'>mlflow.spark</span>\n<span class='py'>from</span> <span class='mlflow'>splicemachine.context</span> <span class='py'>import</span> <span class='mlflow'>PySpliceContext</span>\n<span class='py'>from</span> <span class='mlflow'>pyspark.classification</span> <span class='py'>import</span> <span class='mlflow'>DecisionTreeClassifier</span>\n<span class='py'>from</span> <span class='mlflow'>pyspark.feature</span> <span class='py'>import</span> <span class='mlflow'>VectorAssembler</span>\n\n<span style='white'># In the below cell, there will be a form field for you to enter your experiment. <br>&nbsp;&nbsp;&nbsp;Upon pressing enter, it will be registered and submitted with MLFlow</span></span><br>\n<span style='color:lightgrey'># PLEASE NOTE: We highly reccomend that you add these markers after your model is working, so you don't fill up your runs with failures.</span></span><br>\n<span style='color:lightgrey'># We will now create a new run, so your model's metadata isn't overwritten</span></span><br>\nmy_run_uuid = <span class='mlflow'>create_new_run()</span><br>\n<span style='color:lightgrey'># +---------CELL i---------+</span></span>\n# ...\n# Now we can log a parameter (for example, a parameter might be the classifier, the number of training/testing samples etc.)\n<span class='py'>with </span><span class='mlflow'>mlflow.start_run(run_uuid=run_uuid):</span>\n    <b># Syntax: <span class='mlflow'>mlflow</span>.log_param(parameter, value). Note value must be a string (you may use the <span class='py'>str()</span> method</b><br>\n    <span class='mlflow'>mlflow</span>.log_param(<span class='string'>\"dataset\"</span>, <span class='string'>\"SPLICE.SHIPPING_02_2018\"</span>)\n\n<span style='color:lightgrey'># +---------CELL i+1---------+</span></span>\n# ..\n<span class='py'>with </span><span class='mlflow'>mlflow.start_run(run_uuid=run_uuid):</span>\n    <span class='mlflow'>mlflow</span>.log_param(<span class='string'>\"preprocessing\"</span>, <span class='string'>\"string indexer, vector assembler\"</span>)\n\n<span style='color:lightgrey'># +---------CELL i + 3---------+</span></span>\n# ..\n<span class='py'>with </span><span class='mlflow'>mlflow.start_run(run_uuid=run_uuid):</span>\n    # Next, we have to log our classifier as an \"artifact\" to MLFlow. This allows us to import it later and predict, \\\n         and it also gives the ability for deploying it to SageMaker or AzureML (experimental)\n    <b># Syntax: <span class='mlflow'>mlflow</span>.spark.log_model(&lt;variable to our trained model&gt;, 'pysparkmodel') # make sure you use the 'pysparkmodel' string as your second parameter!</b>\n    <span class='mlflow'>mlflow</span>.spark.log_model(fitted_decision_tree, <span class='string'>\"pysparkmodel\"</span>)\n\n<span style='color:lightgrey'># +---------CELL i + 4---------+</span></span>\n<span class='py'>with </span><span class='mlflow'>mlflow.start_run(run_uuid=run_uuid):</span>\n    # ...\n    # Lastly, we will log metrics about how well are model performs\n    <b> Syntax: <span class='mlflow'>mlflow</span>.log_metric(metric name, value). Note that value must be an integer or a floating point number</b><br>\n    <span class='mlflow'>mlflow</span>.log_metric(<span class='string'>\"F1 Score\"</span>, model_f1_score)\n    <span class='mlflow'>mlflow</span>.log_metric(<span class='string'>\"Accuracy\"</span>, model_accuracy_score)\n    <span class='mlflow'>mlflow</span>.log_metric(<span class='string'>\"F1 Score\"</span>, model_matthews_corrcoef)\n\n# Congrats 🎉! You made it!\n</pre>"}]},"apps":[],"jobName":"paragraph_1539663694278_1733320692","id":"20180720-210610_856826769","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:197"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Instantiate Important Objects and Import Libraries</h1><br>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Instantiate Important Objects and Import Libraries</h1><br>"}]},"apps":[],"jobName":"paragraph_1539663694278_729432407","id":"20180723-195607_1112898958","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:198"},{"text":"%spark.pyspark\n#from splicemachine.context import PySpliceContext\nimport mlflow # use log_param and log_metric\nimport mlflow.spark # configure spark loader for models and deployment\nimport os\nos.system('env')\n#spliceContext = PySpliceContext(jdbc_url, sqlContext) # Initialize the PySpliceContext, which is sort of the bridge between your DB and Apache Spark (pyspark in this case)\n#print(spliceContext)","user":"splice","dateUpdated":"2018-10-16T04:28:27+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"SPLICE_0SPARK_MESOS_REJECTOFFERDURATION=120s\nZEPP\nELIN_JAVA_OPTS_GC_THREADS=-XX:ParallelGCThreads=2\nLIBPROCESS_IP=0.0.0.0\nSPLICE_AUTHENTICATION_NATIVE_ALGORITHM=SHA-512\nSPLICE_SPARK_NETWORK_TIMEOUT=120s\nHBASE_SNAPSHOT_MASTER_TIMEOUTMILLIS=60000\nZEPPELIN_SPARK_INTP_MEM=--driver-memory 5120m \nSPLICE_SPA"}]},"apps":[],"jobName":"paragraph_1539663694279_555260895","id":"20180723-195602_485889720","dateCreated":"2018-10-16T04:21:34+0000","dateStarted":"2018-10-16T04:28:27+0000","dateFinished":"2018-10-16T04:28:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:199"},{"text":"%angular\n<h2 style='font-size:40px;font-weight:bold'>Enter your Experiment</h2>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h2 style='font-size:40px;font-weight:bold'>Enter your Experiment</h2>"}]},"apps":[],"jobName":"paragraph_1539663694280_-570710908","id":"20180721-225325_944183325","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:200"},{"text":"%spark.pyspark\n#import os\n#os.environ['GIT_PYTHON_REFRESH'] = 'silence'\ndef show_confusion_matrix(TP, TN, FP, FN): # function that shows you a device called a confusion matrix... will be helpful when evaluating. It allows you to see how well your model performs\n    confusion_rdd = sc.parallelize([['Predicted +', TP, FN], ['Actual -', FP, TN]])\n    confusion_matrix = sqlContext.createDataFrame(confusion_rdd, ['', 'Actual +', 'Predicted -'])\n    confusion_matrix.show()\nmlflow.end_run()\n\nclass Run:\n    def __init__(self):\n        self.run_uuid = None\n\n    @staticmethod\n    def handle_handlers(handler, *args, **kwargs):\n        if handler == 'param':\n            mlflow.log_param(*args, **kwargs)\n        elif handler == 'metric':\n            mlflow.log_metric(*args, **kwargs)\n        elif handler == 'artifact':\n            mlflow.log_artifact(*args, **kwargs)\n        elif handler == 'spark_model':\n            mlflow.spark.log_model(*args, **kwargs)\n        else:\n            raise Exception(\"Handler {0} not understood. Please use one in ['param', 'metric', 'artifact', 'spark_model']\")\n    \n    def log_metadata(self, handler, *args, **kwargs):\n        if not self.run_uuid:\n            with mlflow.start_run():\n                self.run_uuid = (mlflow.active_run().__dict__['_info'].__dict__['_run_uuid'])\n                print(\"Logged using handler \" + handler)\n                Run.handle_handlers(handler, *args, **kwargs)\n        else:\n            with mlflow.start_run(run_uuid=self.run_uuid):\n                Run.handle_handlers(handler, *args, **kwargs)\n                print(\"Logged using handler \" + handler)\n        return True\n        \n    def log_param(self, *args, **kwargs):\n        return self.log_metadata('param', *args, **kwargs)\n    \n    def log_metric(self, *args, **kwargs):\n        return self.log_metadata('metric', *args, **kwargs)\n    \n    def log_artifact(self, *args, **kwargs):\n        return self.log_metadata('artifact', *args, **kwargs)\n    \n    def log_model(self, *args, **kwargs):\n        return self.log_metadata('spark_model', *args, **kwargs)\n    \n    def create_new_run(self):\n        self.run_uuid = None\n\nexperiment = z.input(\"Experiment (Folder for your models, eg. shipping)\")\nexperiment = experiment.lower()\nmlflow.set_tracking_uri('/mlruns')\nprint(\"Tracking Path \" + mlflow.get_tracking_uri())\nfound = False\nif not len(experiment) in [0, 1]:\n    for e in [i for i in mlflow.tracking.list_experiments()]:\n        if experiment == e.name:\n            print('Experiment has already been created')\n            found = True\n            os.environ['MLFLOW_EXPERIMENT_ID'] = str(e._experiment_id)\n            \n    if not found:\n        _id = mlflow.tracking.create_experiment(experiment)\n        print('Success! Created Experiment')\n        os.environ['MLFLOW_EXPERIMENT_ID'] = str(_id)\nelse:\n    print(\"Please fill out this field\")\n    \n#print(mlflow.tracking.list_experiments()[0])","user":"splice","dateUpdated":"2018-10-16T04:29:03+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{"Experiment (Folder for your models, eg. shipping)":"sonar demo"},"forms":{"Experiment (Folder for your models, eg. shipping)":{"type":"TextBox","name":"Experiment (Folder for your models, eg. shipping)","displayName":"Experiment (Folder for your models, eg. shipping)","defaultValue":"","hidden":false,"$$hashKey":"object:8631"}}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Tracking Path /mlruns\n"},{"type":"TEXT","data":"Fail to execute line 59:     for e in [i for i in mlflow.tracking.list_experiments()]:\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-1585734382397109147.py\", line 380, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 59, in <module>\nAttributeError: 'module' object has no attribute 'list_experiments'\n"}]},"apps":[],"jobName":"paragraph_1539663694280_-1550787857","id":"20180721-225156_1236081725","dateCreated":"2018-10-16T04:21:34+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:201","dateFinished":"2018-10-16T04:28:52+0000","dateStarted":"2018-10-16T04:28:52+0000"},{"text":"%spark.pyspark\nsonar_run = Run()\nsonar_run.log_param('dataset', 'sonar')\n","user":"splice","dateUpdated":"2018-10-16T04:29:07+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"Fail to execute line 2: sonar_run.log_param('dataset', 'sonar')\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-1585734382397109147.py\", line 380, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 2, in <module>\n  File \"<stdin>\", line 39, in log_param\n  File \"<stdin>\", line 28, in log_metadata\n  File \"/usr/lib/python3.4/site-packages/mlflow/tracking/fluent.py\", line 137, in start_run\n    active_run_obj = MlflowClient().create_run(\n  File \"/usr/lib/python3.4/site-packages/mlflow/tracking/client.py\", line 32, in __init__\n    self.store = _get_store(tracking_uri)\n  File \"/usr/lib/python3.4/site-packages/mlflow/tracking/utils.py\", line 81, in _get_store\n    return _get_file_store(store_uri)\n  File \"/usr/lib/python3.4/site-packages/mlflow/tracking/utils.py\", line 108, in _get_file_store\n    return FileStore(path)\n  File \"/usr/lib/python3.4/site-packages/mlflow/store/file_store.py\", line 66, in __init__\n    mkdir(self.trash_folder)\n  File \"/usr/lib/python3.4/site-packages/mlflow/utils/file_utils.py\", line 104, in mkdir\n    raise e\n  File \"/usr/lib/python3.4/site-packages/mlflow/utils/file_utils.py\", line 101, in mkdir\n    os.makedirs(target)\n  File \"/usr/lib64/python3.4/os.py\", line 237, in makedirs\n    mkdir(name, mode)\nPermissionError: [Errno 13] Permission denied: '/mlruns/.trash'\n"}]},"apps":[],"jobName":"paragraph_1539663694281_1388726109","id":"20180723-230155_1510252361","dateCreated":"2018-10-16T04:21:34+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:202","dateFinished":"2018-10-16T04:29:07+0000","dateStarted":"2018-10-16T04:29:07+0000"},{"text":"%spark.pyspark\nsonar_run.log_metric('valid', 1) ","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Logged using handler metric\nTrue\n"}]},"apps":[],"jobName":"paragraph_1539663694281_-1719158341","id":"20180730-192302_685519187","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:203"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Importing into Spark (without MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>Thanks for entering your JDBC URL. Remember to press &lt;enter&gt; or your entry will not be saved. Now that we have that, we can import your data into a Spark dataframe, using our special PySpliceContext. This allows you to query data from your database (using SQL), and convert the resulting table into a Spark DataFrame, which we can do machine learning on.<footer>-Great Job, your friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Importing into Spark (without MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>Thanks for entering your JDBC URL. Remember to press &lt;enter&gt; or your entry will not be saved. Now that we have that, we can import your data into a Spark dataframe, using our special PySpliceContext. This allows you to query data from your database (using SQL), and convert the resulting table into a Spark DataFrame, which we can do machine learning on.<footer>-Great Job, your friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694282_-229094779","id":"20180721-223836_1674924437","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:204"},{"text":"%spark.pyspark\nbreast_cancer_dataframe = spliceContext.df('SELECT * FROM DEMO.BREAST_CANCER') # retrieve table as df from Splice DB\n\nbreast_cancer_dataframe  = breast_cancer_dataframe.withColumnRenamed(\"LABEL\", \"label\") # change uppercase label to lowercase so that ml model will be able to find it\n\nprint('DataFrame Sample (from Spark)')\n\nbreast_cancer_dataframe.show(3) # print a sample to stdout\n\nprint(' ') #newline\nprint('Dataframe Schema')\nbreast_cancer_dataframe.printSchema()","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"fontSize":9,"results":{"0":{"graph":{"mode":"table","height":384,"optionOpen":false}}},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DataFrame Sample (from Spark)\n+-----------+------------+--------------+---------+---------------+----------------+--------------+-------------------+-------------+----------------------+------------+-------------+---------------+----------+----------------+-----------------+---------------+--------------------+--------------+-----------------------+------------+-------------+---------------+----------+----------------+-----------------+---------------+--------------------+--------------+-----------------------+-----+\n|MEAN_RADIUS|MEAN_TEXTURE|MEAN_PERIMETER|MEAN_AREA|MEAN_SMOOTHNESS|MEAN_COMPACTNESS|MEAN_CONCAVITY|MEAN_CONCAVE_POINTS|MEAN_SYMMETRY|MEAN_FRACTAL_DIMENSION|RADIUS_ERROR|TEXTURE_ERROR|PERIMETER_ERROR|AREA_ERROR|SMOOTHNESS_ERROR|COMPACTNESS_ERROR|CONCAVITY_ERROR|CONCAVE_POINTS_ERROR|SYMMETRY_ERROR|FRACTAL_DIMENSION_ERROR|WORST_RADIUS|WORST_TEXTURE|WORST_PERIMETER|WORST_AREA|WORST_SMOOTHNESS|WORST_COMPACTNESS|WORST_CONCAVITY|WORST_CONCAVE_POINTS|WORST_SYMMETRY|WORST_FRACTAL_DIMENSION|label|\n+-----------+------------+--------------+---------+---------------+----------------+--------------+-------------------+-------------+----------------------+------------+-------------+---------------+----------+----------------+-----------------+---------------+--------------------+--------------+-----------------------+------------+-------------+---------------+----------+----------------+-----------------+---------------+--------------------+--------------+-----------------------+-----+\n|      17.99|       10.38|         122.8|   1001.0|         0.1184|          0.2776|        0.3001|             0.1471|       0.2419|               0.07871|       1.095|       0.9053|          8.589|     153.4|        0.006399|          0.04904|        0.05373|             0.01587|       0.03003|               0.006193|       25.38|        17.33|          184.6|    2019.0|          0.1622|           0.6656|         0.7119|              0.2654|        0.4601|                 0.1189|    0|\n|      14.68|       20.13|         94.74|    684.5|        0.09867|           0.072|       0.07395|            0.05259|       0.1586|               0.05922|      0.4727|         1.24|          3.195|      45.4|        0.005718|          0.01162|        0.01998|             0.01109|        0.0141|               0.002085|       19.07|        30.88|          123.4|    1138.0|          0.1464|           0.1871|         0.2914|              0.1609|        0.3029|                0.08216|    0|\n|      17.02|       23.98|         112.8|    899.3|         0.1197|          0.1496|        0.2417|             0.1203|       0.2248|               0.06382|      0.6009|        1.398|          3.999|     67.78|        0.008268|          0.03082|        0.05042|             0.01112|       0.02102|               0.003854|       20.88|        32.09|          136.1|    1344.0|          0.1634|           0.3559|         0.5588|              0.1847|         0.353|                0.08482|    0|\n+-----------+------------+--------------+---------+---------------+----------------+--------------+-------------------+-------------+----------------------+------------+-------------+---------------+----------+----------------+-----------------+---------------+--------------------+--------------+-----------------------+------------+-------------+---------------+----------+----------------+-----------------+---------------+--------------------+--------------+-----------------------+-----+\nonly showing top 3 rows\n\n \nDataframe Schema\nroot\n |-- MEAN_RADIUS: double (nullable = true)\n |-- MEAN_TEXTURE: double (nullable = true)\n |-- MEAN_PERIMETER: double (nullable = true)\n |-- MEAN_AREA: double (nullable = true)\n |-- MEAN_SMOOTHNESS: double (nullable = true)\n |-- MEAN_COMPACTNESS: double (nullable = true)\n |-- MEAN_CONCAVITY: double (nullable = true)\n |-- MEAN_CONCAVE_POINTS: double (nullable = true)\n |-- MEAN_SYMMETRY: double (nullable = true)\n |-- MEAN_FRACTAL_DIMENSION: double (nullable = true)\n |-- RADIUS_ERROR: double (nullable = true)\n |-- TEXTURE_ERROR: double (nullable = true)\n |-- PERIMETER_ERROR: double (nullable = true)\n |-- AREA_ERROR: double (nullable = true)\n |-- SMOOTHNESS_ERROR: double (nullable = true)\n |-- COMPACTNESS_ERROR: double (nullable = true)\n |-- CONCAVITY_ERROR: double (nullable = true)\n |-- CONCAVE_POINTS_ERROR: double (nullable = true)\n |-- SYMMETRY_ERROR: double (nullable = true)\n |-- FRACTAL_DIMENSION_ERROR: double (nullable = true)\n |-- WORST_RADIUS: double (nullable = true)\n |-- WORST_TEXTURE: double (nullable = true)\n |-- WORST_PERIMETER: double (nullable = true)\n |-- WORST_AREA: double (nullable = true)\n |-- WORST_SMOOTHNESS: double (nullable = true)\n |-- WORST_COMPACTNESS: double (nullable = true)\n |-- WORST_CONCAVITY: double (nullable = true)\n |-- WORST_CONCAVE_POINTS: double (nullable = true)\n |-- WORST_SYMMETRY: double (nullable = true)\n |-- WORST_FRACTAL_DIMENSION: double (nullable = true)\n |-- label: integer (nullable = true)\n\n"}]},"apps":[],"jobName":"paragraph_1539663694282_1872480348","id":"20180723-170130_762937832","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:205"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Preprocessing (without MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>Make sense? Cool. Now let's go to the preprocessing of our data, which basically makes it possible for your computer to understand the data effectively. In this example, fortunately for us, the preprocessing is pretty much done, except our data is still in a table like format. We need to convert that to a series of vectors so our ML models can understand them. This is done using the VectorAssembler function. <footer>Don't give up! <3 your friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Preprocessing (without MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>Make sense? Cool. Now let's go to the preprocessing of our data, which basically makes it possible for your computer to understand the data effectively. In this example, fortunately for us, the preprocessing is pretty much done, except our data is still in a table like format. We need to convert that to a series of vectors so our ML models can understand them. This is done using the VectorAssembler function. <footer>Don't give up! <3 your friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694283_-1050755910","id":"20180723-170913_2032009890","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:206"},{"text":"%spark.pyspark\nfrom pyspark.ml.feature import VectorAssembler\n\ninputColumns = breast_cancer_dataframe.columns # get the columns from our dataframe\ninputColumns.remove('label') # remove the label because it isn't an input columm (feature); it is an output column (or a label)\n\nassembler = VectorAssembler(inputCols=inputColumns, outputCol='features') # take all of these columns and \"vectorize\" them. spit out the column name \"features\"","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1539663694284_328565916","id":"20180720-212614_142336774","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:207"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Pipeline & Model Creation (without MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>On a lower level, all operations on dataframes, including models are what we call <i>dataframe transformations.</i> DataFrame transformations take in a dataframe a return a new one with some change. We can chain these transformers together in something called a Pipeline object, which we can eventually apply to raw data and get out a prediction. It is common practice in the machine learning world to partition your data into \"training\" and \"testing\" datasets, in which the computer learns the relationship using the training dataset and is evaluated with the testing dataset. We evaluate our model by giving it only the input data from the testing dataset and compare its predicted output to the actual output. This allows us to create some meaningful metrics that help us evaluate our model. After we do that, we can assemble our pipeline and create our model using the training dataset<footer>Don't give up! <3 your friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Pipeline & Model Creation (without MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>On a lower level, all operations on dataframes, including models are what we call <i>dataframe transformations.</i> DataFrame transformations take in a dataframe a return a new one with some change. We can chain these transformers together in something called a Pipeline object, which we can eventually apply to raw data and get out a prediction. It is common practice in the machine learning world to partition your data into \"training\" and \"testing\" datasets, in which the computer learns the relationship using the training dataset and is evaluated with the testing dataset. We evaluate our model by giving it only the input data from the testing dataset and compare its predicted output to the actual output. This allows us to create some meaningful metrics that help us evaluate our model. After we do that, we can assemble our pipeline and create our model using the training dataset<footer>Don't give up! <3 your friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694284_-1062354128","id":"20180723-171417_897709305","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:208"},{"text":"%spark.pyspark\nfrom pyspark.ml.classification import DecisionTreeClassifier, RandomForestClassifier, NaiveBayes, GBTClassifier, LogisticRegression\nfrom pyspark.ml import Pipeline\n\nclassifier = DecisionTreeClassifier() # create a decision tree classifier \n\nstages = [ # create our pipeline stages\n        assembler,\n        classifier\n    ]\n\nbcPipeline = Pipeline(stages=stages) # create a pipeline with our defined stages\n","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1539663694285_-1554280077","id":"20180720-224353_1265808272","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:209"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Train and Evaluate our Model (without MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>Now that we have a trained model, we can evaluate it by comparing the actual predictions to the correct predictions. Using this, we can get some insight into how well our model performs via metrics such as F1 Score, Accuracy and Matthews Correlation Coefficient. It is also good practice to employ some sort of cross validation when evaluating your model to prevent a paradigm known as a <i>overfitting</i>. We use CV iteation averaging.<footer> <3 your friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Train and Evaluate our Model (without MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>Now that we have a trained model, we can evaluate it by comparing the actual predictions to the correct predictions. Using this, we can get some insight into how well our model performs via metrics such as F1 Score, Accuracy and Matthews Correlation Coefficient. It is also good practice to employ some sort of cross validation when evaluating your model to prevent a paradigm known as a <i>overfitting</i>. We use CV iteation averaging.<footer> <3 your friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694286_-793362788","id":"20180723-173317_1364560516","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:210"},{"text":"%spark.pyspark\n\nCV_ITERATIONS = 6 # The number of iterations to rerun our model and average the results on\nTRAINING_SIZE = 0.8 # The percentage of the original dataset to use for training\n\navg_tp = []\navg_tn = []\navg_fp = []\navg_fn = []\n\n# above: initialize some lists to keep track of averaged results\n\nfor iteration in range(1, CV_ITERATIONS + 1): # Loop through iterations\n    training, testing = breast_cancer_dataframe.randomSplit([TRAINING_SIZE, (1.0 - TRAINING_SIZE)]) # Create training and testing dataFrame\n    fittedPipeline = bcPipeline.fit(training)\n    predictions_dataframe = fittedPipeline.transform(testing)\n    pred_v_lab = predictions_dataframe.select('label', 'prediction') # Select the actual and the predicted labels\n    \n    avg_tp.append(pred_v_lab[(pred_v_lab.label == 1) & (pred_v_lab.prediction == 1)].count()) # Add confusion stats\n    \n    avg_tn.append(pred_v_lab[(pred_v_lab.label == 0) & (pred_v_lab.prediction == 0)].count())\n    \n    avg_fp.append(pred_v_lab[(pred_v_lab.label == 1) & (pred_v_lab.prediction == 0)].count())\n    avg_fn.append(pred_v_lab[(pred_v_lab.label == 0) & (pred_v_lab.prediction == 1)].count())\n    \n    \n    print(\"ITERATION {0}\".format(str(iteration)))\n    show_confusion_matrix(avg_tp[-1], avg_tn[-1], avg_fp[-1], avg_fn[-1]) # show the confusion matrix to the user\n    print(\" \")\n","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ITERATION 1\n+-----------+--------+-----------+\n|           |Actual +|Predicted -|\n+-----------+--------+-----------+\n|Predicted +|      72|          4|\n|   Actual -|       2|         38|\n+-----------+--------+-----------+\n\n \nITERATION 2\n+-----------+--------+-----------+\n|           |Actual +|Predicted -|\n+-----------+--------+-----------+\n|Predicted +|      62|          2|\n|   Actual -|       4|         38|\n+-----------+--------+-----------+\n\n \nITERATION 3\n+-----------+--------+-----------+\n|           |Actual +|Predicted -|\n+-----------+--------+-----------+\n|Predicted +|      61|          4|\n|   Actual -|       3|         37|\n+-----------+--------+-----------+\n\n \nITERATION 4\n+-----------+--------+-----------+\n|           |Actual +|Predicted -|\n+-----------+--------+-----------+\n|Predicted +|      64|          5|\n|   Actual -|       4|         40|\n+-----------+--------+-----------+\n\n \nITERATION 5\n+-----------+--------+-----------+\n|           |Actual +|Predicted -|\n+-----------+--------+-----------+\n|Predicted +|      65|          6|\n|   Actual -|       6|         37|\n+-----------+--------+-----------+\n\n \nITERATION 6\n+-----------+--------+-----------+\n|           |Actual +|Predicted -|\n+-----------+--------+-----------+\n|Predicted +|      63|          4|\n|   Actual -|       3|         33|\n+-----------+--------+-----------+\n\n \n"}]},"apps":[],"jobName":"paragraph_1539663694286_-846319516","id":"20180723-174107_1871176809","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:211"},{"text":"%pyspark\nimport numpy as np\n\ndef display(html):\n    \"\"\" Run angular from Python in Zeppelin\"\"\"\n    print(\"%angular\")\n    print(html)\n    \nTP = np.mean(avg_tp)\nTN = np.mean(avg_tn)\nFP = np.mean(avg_fp)\nFN = np.mean(avg_fn)\n\ndisplay('<h1>Final Model Performance</h1>')\nTPR = float(TP) / (TP + FN)\nSPC = float(TN) / (FP + TN)\nPPV = float(TP) / (TP + FP)\nNPV = float(TN) / (TN + FN)\nFPR = float(FP) / (FP + TN)\nFDR = float(FP) / (FP + TP)\nFNR = float(FN) / (FN + TP)\nACC = float(TP + TN) / (TP + FN + FP + TN)\nF1 = float((2 * TP)) /((2 * TP) + FP + FN)\nMCC = float((TP*TN) - (FP*FN)) / (np.sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN)))\n\n# ---------------------------------------------------\ndisplay('<h1 style=\"color:grey; font-size:15px\">Sensitivity ' + str(TPR) + '</h1>')\ndisplay('<h1 style=\"color:grey; font-size:15px\">Specificity ' + str(SPC) + '</h1>')\ndisplay('<h1 style=\"color:grey; font-size:15px\">Precision ' + str(PPV) + '</h1>')\ndisplay('<h1 style=\"color:grey; font-size:15px\">Negative Predictive Value ' + str(NPV) + '</h1>')\ndisplay('<h1 style=\"color:grey; font-size:15px\">False Positive Rate ' + str(FPR) + '</h1>')\ndisplay('<h1 style=\"color:grey; font-size:15px\">False Negative Rate ' + str(FDR) + '</h1>')\ndisplay('<h1 style=\"color:grey; font-size:15px\">Accuracy ' + str(ACC) + '</h1>')\ndisplay('<h1 style=\"color:grey; font-size:15px\">F1 Score ' + str(F1) + '</h1>')\ndisplay('<h1 style=\"color:grey; font-size:15px\">Matthews Correlation Coefficient ' + str(MCC) + '</h1>')","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1>Final Model Performance</h1>\n"},{"type":"ANGULAR","data":"<h1 style=\"color:grey; font-size:15px\">Sensitivity 0.9393203883495145</h1>\n"},{"type":"ANGULAR","data":"<h1 style=\"color:grey; font-size:15px\">Specificity 0.9102040816326531</h1>\n"},{"type":"ANGULAR","data":"<h1 style=\"color:grey; font-size:15px\">Precision 0.9462102689486552</h1>\n"},{"type":"ANGULAR","data":"<h1 style=\"color:grey; font-size:15px\">Negative Predictive Value 0.8991935483870969</h1>\n"},{"type":"ANGULAR","data":"<h1 style=\"color:grey; font-size:15px\">False Positive Rate 0.08979591836734695</h1>\n"},{"type":"ANGULAR","data":"<h1 style=\"color:grey; font-size:15px\">False Negative Rate 0.053789731051344734</h1>\n"},{"type":"ANGULAR","data":"<h1 style=\"color:grey; font-size:15px\">Accuracy 0.928462709284627</h1>\n"},{"type":"ANGULAR","data":"<h1 style=\"color:grey; font-size:15px\">F1 Score 0.9427527405602925</h1>\n"},{"type":"ANGULAR","data":"<h1 style=\"color:grey; font-size:15px\">Matthews Correlation Coefficient 0.8474616391572282</h1>\n"}]},"apps":[],"jobName":"paragraph_1539663694287_1004990992","id":"20180723-175924_2111708803","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:212"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Add MLFlow markers</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>The last step in this workflow is adding MLFlow markers to your code, so you can freely tweak parameters and deploy your models without losing information. Refer to the Python codeblock in one of the above cells for usage demonstration.<footer> <3 your friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Add MLFlow markers</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>The last step in this workflow is adding MLFlow markers to your code, so you can freely tweak parameters and deploy your models without losing information. Refer to the Python codeblock in one of the above cells for usage demonstration.<footer> <3 your friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694288_1999775294","id":"20180723-175926_227184265","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:213"},{"text":"%spark.pyspark\nwith mlflow.start_run():\n    mlflow.log_param()","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":true,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"with mlflow.start_run():"}]},"apps":[],"jobName":"paragraph_1539663694288_-771980726","id":"20180730-181144_350213113","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:214"},{"text":"%pyspark\nimport mlflow # import mlflow from Python packages, allowing us to log parameters and metrics\nimport mlflow.spark # import mlflow.spark from Python packages, allowing us to log models using Spark\nfrom splicemachine.context import PySpliceContext # import the PySpliceContext from the splicemachine package\nfrom pyspark.ml.feature import VectorAssembler\n\nmlflow.end_run() # end any previous runs to avoid overwritting their metadata\n\nwith mlflow.start_run():\n        \n    CV_ITERATIONS = 6 # The number of iterations to rerun our model and average the results on\n    TRAINING_SIZE = 0.8 # The percentage of the original dataset to use for training\n    \n    mlflow.log_param('CV_iterations', str(CV_ITERATIONS))\n    mlflow.log_param('Training Size', str(TRAINING_SIZE))\n    \n    spliceContext = PySpliceContext(jdbc_url, sqlContext) # Initialize the PySpliceContext, which is sort of the bridge between your DB and Apache Spark (pyspark in this case)\n    \n    breast_cancer_dataframe = spliceContext.df('SELECT * FROM DEMO.BREAST_CANCER') # retrieve table as df from Splice DB\n    breast_cancer_dataframe  = breast_cancer_dataframe.withColumnRenamed(\"LABEL\", \"label\") # change uppercase label to lowercase so that ml model will be able to find it\n    \n    print('DataFrame Sample (from Spark)') # print a title for a sample\n    breast_cancer_dataframe.show(3) # print a sample to stdout\n    \n    print(' ') # newline\n    \n    print('Dataframe Schema') # print a title for a sample\n    breast_cancer_dataframe.printSchema() # print a schema\n    \n    mlflow.log_param('data_location', 'DEMO.BREAST_CANCER') # log a parameter showing us where our data is\n    inputColumns = breast_cancer_dataframe.columns # get the columns from our dataframe\n    inputColumns.remove('label') # remove the label because it isn't an input columm (feature); it is an output column (or a label)\n\n    assembler = VectorAssembler(inputCols=inputColumns, outputCol='features') # take all of these columns and \"vectorize\" them. spit out the column name \"features\"\n\n    classifier = DecisionTreeClassifier() # create a decision tree classifier. Since we are using MLFlow, you could easily change this to another model by changing the algo param, and the classifier used. \n    mlflow.log_param('algo', 'decision tree')\n    \n    stages = [ # create our pipeline stages\n        assembler,\n        classifier\n    ]\n    bcPipeline = Pipeline(stages=stages) # create a pipeline with our defined stages\n\n    avg_tp = []\n    avg_tn = []\n    avg_fp = []\n    avg_fn = []\n    \n    for iteration in range(1, CV_ITERATIONS + 1): # Loop through iterations\n        training, testing = breast_cancer_dataframe.randomSplit([TRAINING_SIZE, (1.0 - TRAINING_SIZE)]) # Create training and testing dataFrame\n        fittedPipeline = bcPipeline.fit(training)\n        predictions_dataframe = fittedPipeline.transform(testing)\n        pred_v_lab = predictions_dataframe.select('label', 'prediction') # Select the actual and the predicted labels\n        avg_tp.append(pred_v_lab[(pred_v_lab.label == 1) & (pred_v_lab.prediction == 1)].count()) # Add confusion stats\n        avg_tn.append(pred_v_lab[(pred_v_lab.label == 0) & (pred_v_lab.prediction == 0)].count())\n        avg_fp.append(pred_v_lab[(pred_v_lab.label == 1) & (pred_v_lab.prediction == 0)].count())\n        avg_fn.append(pred_v_lab[(pred_v_lab.label == 0) & (pred_v_lab.prediction == 1)].count())\n        \n        print(\"ITERATION {0}\".format(str(iteration)))\n        show_confusion_matrix(avg_tp[-1], avg_tn[-1], avg_fp[-1], avg_fn[-1]) # show the confusion matrix to the user\n        print(\" \")\n        \n        TP = np.mean(avg_tp)\n        TN = np.mean(avg_tn)\n        FP = np.mean(avg_fp)\n        FN = np.mean(avg_fn)\n       \n        metrics = {'TPR': float(TP) / (TP + FN), 'SPC': float(TN) / (FP + TN), \"PPV\": float(TP) / (TP + FP), 'PPV':  float(TP) / (TP + FP), 'NPV':  float(TN) / (TN + FN), 'FPR':  float(FP) / (FP + TN), 'FDR': float(FP) / (FP + TP), 'FNR':  float(FN) / (FN + TP), 'ACC':  float(TP + TN) / (TP + FN + FP + TN), 'F1':float((2 * TP)) /((2 * TP) + FP + FN), 'MCC':  float((TP*TN) - (FP*FN)) / (np.sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN)))\n    \n    mlflow.spark.log_model(fittedPipeline, 'pysparkmodel') # save the model as an artifact for the current run\n    \n    for key, value in metrics.items():\n        mlflow.log_metric(key, value)","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"editorSetting":{"language":"python","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539663694289_-340904973","id":"20180723-180221_1783642556","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:215"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Importing into Spark (MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>After you have a working model, we can write our MLFlow markers inside our code. It is very important that you structure your MLFlow code in functions, so that your metadata doesn't get detached from each other in different runs.<footer>-Great Job, your friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Importing into Spark (MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>After you have a working model, we can write our MLFlow markers inside our code. It is very important that you structure your MLFlow code in functions, so that your metadata doesn't get detached from each other in different runs.<footer>-Great Job, your friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694289_1980484751","id":"20180723-195335_1668897264","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:216"},{"text":"%spark.pyspark\nsonar_run = Run()\nsonar_run.create_new_run()","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1539663694290_618528737","id":"20180730-194440_1954422068","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:217"},{"text":"%spark.pyspark\nimport os\nfrom pyspark import Row\n\nrow = Row(*['V' + str(i) for i in range(0, 61)])\ndf_rows = []\nwith open('sonar.csv', 'r') as d:\n   for line in d:\n        l = line.replace('\\n', '').split(',')\n        m = [float(i) for i in l[:-1]] + [l[-1]]\n        df_rows.append(row(*m))\n\nsonar_run.log_param('dataset', 'sonar')\ndataframe = sqlContext.createDataFrame(df_rows)\ndataframe.show(5)","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Notice: failed to import git (the git executable is probably not on your PATH), so git sha will not be available. Error: Failed to initialize: Bad git executable.\nThe git executable must be specified in one of the following ways:\n    - be included in your $PATH\n    - be set via $GIT_PYTHON_GIT_EXECUTABLE\n    - explicitly set via git.refresh()\n\nAll git commands will error until this is rectified.\n\nThis initial warning can be silenced or aggravated in the future by setting the\n$GIT_PYTHON_REFRESH environment variable. Use one of the following values:\n    - quiet|q|silence|s|none|n|0: for no warning or exception\n    - warn|w|warning|1: for a printed warning\n    - error|e|raise|r|2: for a raised exception\n\nExample:\n    export GIT_PYTHON_REFRESH=quiet\n\nLogged using handler param\n+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+---+\n|    V0|    V1|    V2|    V3|    V4|    V5|    V6|    V7|    V8|    V9|   V10|   V11|   V12|   V13|   V14|   V15|   V16|   V17|   V18|   V19|   V20|   V21|   V22|   V23|   V24|   V25|   V26|   V27|   V28|   V29|   V30|   V31|   V32|   V33|   V34|   V35|   V36|   V37|   V38|   V39|   V40|   V41|   V42|   V43|   V44|   V45|   V46|   V47|   V48|   V49|   V50|   V51|   V52|   V53|   V54|   V55|   V56|   V57|   V58|   V59|V60|\n+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+---+\n|  0.02|0.0371|0.0428|0.0207|0.0954|0.0986|0.1539|0.1601|0.3109|0.2111|0.1609|0.1582|0.2238|0.0645| 0.066|0.2273|  0.31|0.2999|0.5078|0.4797|0.5783|0.5071|0.4328| 0.555|0.6711|0.6415|0.7104| 0.808|0.6791|0.3857|0.1307|0.2604|0.5121|0.7547|0.8537|0.8507|0.6692|0.6097|0.4943|0.2744| 0.051|0.2834|0.2825|0.4256|0.2641|0.1386|0.1051|0.1343|0.0383|0.0324|0.0232|0.0027|0.0065|0.0159|0.0072|0.0167| 0.018|0.0084| 0.009|0.0032|  R|\n|0.0453|0.0523|0.0843|0.0689|0.1183|0.2583|0.2156|0.3481|0.3337|0.2872|0.4918|0.6552|0.6919|0.7797|0.7464|0.9444|   1.0|0.8874|0.8024|0.7818|0.5212|0.4052|0.3957|0.3914| 0.325|  0.32|0.3271|0.2767|0.4423|0.2028|0.3788|0.2947|0.1984|0.2341|0.1306|0.4182|0.3835|0.1057| 0.184| 0.197|0.1674|0.0583|0.1401|0.1628|0.0621|0.0203| 0.053|0.0742|0.0409|0.0061|0.0125|0.0084|0.0089|0.0048|0.0094|0.0191| 0.014|0.0049|0.0052|0.0044|  R|\n|0.0262|0.0582|0.1099|0.1083|0.0974| 0.228|0.2431|0.3771|0.5598|0.6194|0.6333| 0.706|0.5544| 0.532|0.6479|0.6931|0.6759|0.7551|0.8929|0.8619|0.7974|0.6737|0.4293|0.3648|0.5331|0.2413| 0.507|0.8533|0.6036|0.8514|0.8512|0.5045|0.1862|0.2709|0.4232|0.3043|0.6116|0.6756|0.5375|0.4719|0.4647|0.2587|0.2129|0.2222|0.2111|0.0176|0.1348|0.0744| 0.013|0.0106|0.0033|0.0232|0.0166|0.0095| 0.018|0.0244|0.0316|0.0164|0.0095|0.0078|  R|\n|  0.01|0.0171|0.0623|0.0205|0.0205|0.0368|0.1098|0.1276|0.0598|0.1264|0.0881|0.1992|0.0184|0.2261|0.1729|0.2131|0.0693|0.2281| 0.406|0.3973|0.2741| 0.369|0.5556|0.4846| 0.314|0.5334|0.5256| 0.252| 0.209|0.3559| 0.626| 0.734| 0.612|0.3497|0.3953|0.3012|0.5408|0.8814|0.9857|0.9167|0.6121|0.5006| 0.321|0.3202|0.4295|0.3654|0.2655|0.1576|0.0681|0.0294|0.0241|0.0121|0.0036| 0.015|0.0085|0.0073| 0.005|0.0044| 0.004|0.0117|  R|\n|0.0762|0.0666|0.0481|0.0394| 0.059|0.0649|0.1209|0.2467|0.3564|0.4459|0.4152|0.3952|0.4256|0.4135|0.4528|0.5326|0.7306|0.6193|0.2032|0.4636|0.4148|0.4292| 0.573|0.5399|0.3161|0.2285|0.6995|   1.0|0.7262|0.4724|0.5103|0.5459|0.2881|0.0981|0.1951|0.4181|0.4604|0.3217|0.2828| 0.243|0.1979|0.2444|0.1847|0.0841|0.0692|0.0528|0.0357|0.0085| 0.023|0.0046|0.0156|0.0031|0.0054|0.0105| 0.011|0.0015|0.0072|0.0048|0.0107|0.0094|  R|\n+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+------+---+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1539663694291_1181578785","id":"20180730-193435_2062538153","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:218"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Preprocessing (MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>After you have a working model, we can write our MLFlow markers inside our code. It is very important that you structure your MLFlow code in functions, so that your metadata doesn't get detached from each other in different runs.<footer>-Great Job, your friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Preprocessing (MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>After you have a working model, we can write our MLFlow markers inside our code. It is very important that you structure your MLFlow code in functions, so that your metadata doesn't get detached from each other in different runs.<footer>-Great Job, your friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694291_-1761414128","id":"20180723-202217_1959317759","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:219"},{"text":"%spark.pyspark\nfrom pyspark.ml.feature import VectorAssembler, StringIndexer\n\ninputColumns = dataframe.columns\ninputColumns.remove('V60') # remove the label because it isn't an input columm (feature); it is an output column (or a label)\n\nlabelIndexer = StringIndexer(inputCol='V60', outputCol='label')\nassembler = VectorAssembler(inputCols=inputColumns, outputCol='features') # take all of these columns and \"vectorize\" them. spit out the column name \"features\"\nsonar_run.log_param('preprocessing', 'StIdx => Asmblr')\n","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Logged using handler param\nTrue\n"}]},"apps":[],"jobName":"paragraph_1539663694292_-1277440864","id":"20180723-202257_778254541","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:220"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Pipeline & Model Creation (with MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>After you have a working model, we can write our MLFlow markers inside our code. It is very important that you structure your MLFlow code in functions, so that your metadata doesn't get detached from each other in different runs.<footer>-Great Job, your friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Pipeline & Model Creation (with MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>After you have a working model, we can write our MLFlow markers inside our code. It is very important that you structure your MLFlow code in functions, so that your metadata doesn't get detached from each other in different runs.<footer>-Great Job, your friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694297_1927382350","id":"20180723-202552_479153425","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:221"},{"text":"%spark.pyspark\nfrom pyspark.ml.classification import RandomForestClassifier, DecisionTreeClassifier, NaiveBayes, LogisticRegression, GBTClassifier\nfrom pyspark.ml import Pipeline\n\nclassifier = NaiveBayes() # create a decision tree classifier. since we are using MLFlow, we could change this to any classifier PySpark supports. We just need to rememeber to change algo param as well\n\nstages = [ # create our pipeline stages\n        labelIndexer,\n        assembler,\n        classifier\n        ]\n    \nbcPipeline = Pipeline(stages=stages) # create a pipeline with our defined stages\nsonar_run.log_param('algo', 'naive bayes')","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Logged using handler param\nTrue\n"}]},"apps":[],"jobName":"paragraph_1539663694298_-1769115636","id":"20180723-202835_476869491","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:222"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Train and Evaluate our model (MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>After you have a working model, we can write our MLFlow markers inside our code. It is very important that you structure your MLFlow code in functions, so that your metadata doesn't get detached from each other in different runs.<footer>-Great Job, your friends at Splice Machine</footer></blockquote>","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Train and Evaluate our model (MLFlow)</h1><br>\n<blockquote><p class='quotation'><b><br><span style='font-size:20px'>After you have a working model, we can write our MLFlow markers inside our code. It is very important that you structure your MLFlow code in functions, so that your metadata doesn't get detached from each other in different runs.<footer>-Great Job, your friends at Splice Machine</footer></blockquote>"}]},"apps":[],"jobName":"paragraph_1539663694299_660917466","id":"20180723-203210_932188086","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:223"},{"text":"%spark.pyspark\n\nCV_ITERATIONS = 6 # The number of iterations to rerun our model and average the results on\nTRAINING_SIZE = 0.8 # The percentage of the original dataset to use for training\n\n    \navg_tp = []\navg_tn = []\navg_fp = []\navg_fn = []\n    \n# above: initialize some lists to keep track of averaged results\n    \nfor iteration in range(1, CV_ITERATIONS + 1): # Loop through iterations\n    training, testing = dataframe.randomSplit([TRAINING_SIZE, (1.0 - TRAINING_SIZE)]) # Create training and testing dataFrame\n    fittedPipeline = bcPipeline.fit(training)\n    predictions_dataframe = fittedPipeline.transform(testing)\n    pred_v_lab = predictions_dataframe.select('label', 'prediction') # Select the actual and the predicted labels\n        \n    avg_tp.append(pred_v_lab[(pred_v_lab.label == 1) & (pred_v_lab.prediction == 1)].count()) # Add confusion stats\n        \n    avg_tn.append(pred_v_lab[(pred_v_lab.label == 0) & (pred_v_lab.prediction == 0)].count())\n        \n    avg_fp.append(pred_v_lab[(pred_v_lab.label == 1) & (pred_v_lab.prediction == 0)].count())\n    avg_fn.append(pred_v_lab[(pred_v_lab.label == 0) & (pred_v_lab.prediction == 1)].count())\n        \n    print(\"ITERATION {0}\".format(str(iteration)))\n    show_confusion_matrix(avg_tp[-1], avg_tn[-1], avg_fp[-1], avg_fn[-1]) # show the confusion matrix to the user\n    print(\" \")\n\nsonar_run.log_model(fittedPipeline, 'pysparkmodel')","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","editorHide":false,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"ITERATION 1\n+-----------+--------+-----------+\n|           |Actual +|Predicted -|\n+-----------+--------+-----------+\n|Predicted +|      17|          3|\n|   Actual -|       7|         16|\n+-----------+--------+-----------+\n\n \nITERATION 2\n+-----------+--------+-----------+\n|           |Actual +|Predicted -|\n+-----------+--------+-----------+\n|Predicted +|      17|          3|\n|   Actual -|       7|         21|\n+-----------+--------+-----------+\n\n \nITERATION 3\n+-----------+--------+-----------+\n|           |Actual +|Predicted -|\n+-----------+--------+-----------+\n|Predicted +|      14|          3|\n|   Actual -|       4|         21|\n+-----------+--------+-----------+\n\n \nITERATION 4\n+-----------+--------+-----------+\n|           |Actual +|Predicted -|\n+-----------+--------+-----------+\n|Predicted +|      18|          5|\n|   Actual -|       9|         22|\n+-----------+--------+-----------+\n\n \nITERATION 5\n+-----------+--------+-----------+\n|           |Actual +|Predicted -|\n+-----------+--------+-----------+\n|Predicted +|       9|          4|\n|   Actual -|       8|         18|\n+-----------+--------+-----------+\n\n \nITERATION 6\n+-----------+--------+-----------+\n|           |Actual +|Predicted -|\n+-----------+--------+-----------+\n|Predicted +|      11|          1|\n|   Actual -|       5|         22|\n+-----------+--------+-----------+\n\n \nLogged using handler spark_model\nTrue\n"}]},"apps":[],"jobName":"paragraph_1539663694300_1898217478","id":"20180723-203254_2005829934","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:224"},{"text":"%angular\n<h1 style='font-size:40px;font-weight:bold'>Log Performance Metrics (MLFlow)</h1><br>\n","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/undefined","editorHide":true,"fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"ANGULAR","data":"<h1 style='font-size:40px;font-weight:bold'>Log Performance Metrics (MLFlow)</h1><br>"}]},"apps":[],"jobName":"paragraph_1539663694300_-104399167","id":"20180723-204747_1207150183","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:225"},{"text":"%spark.pyspark\n\nimport numpy as np\n\nTP = np.mean(avg_tp)\nTN = np.mean(avg_tn)\nFP = np.mean(avg_fp)\nFN = np.mean(avg_fn)\n\nmetrics = {'TPR': float(TP) / (TP + FN), 'SPC': float(TP) / (TP + FN), 'PPV': float(TP) / (TP + FP), \"NPV\": float(TN) / (TN + FN), \"FPR\": float(FP) / (FP + TN), \"FDR\":  float(FP) / (FP + TP), \"FNR\":float(FN) / (FN + TP), \"ACC\": float(TP + TN) / (TP + FN + FP + TN), \"F1\":float((2 * TP)) /((2 * TP) + FP + FN), \"MCC\": float((TP*TN) - (FP*FN)) / (np.sqrt((TP+FP)*(TP+FN)*(TN+FP)*(TN+FN)))}\n\nfor key, value in metrics.items():\n    sonar_run.log_metric(key, value)\n    print(key, '-->', value)\n   ","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Logged using handler metric\nTrue\nNPV --> 0.8633093525179856\nLogged using handler metric\nTrue\nMCC --> 0.5573276359189507\nLogged using handler metric\nTrue\nF1 --> 0.7445887445887446\nLogged using handler metric\nTrue\nFDR --> 0.3174603174603175\nLogged using handler metric\nTrue\nTPR --> 0.8190476190476191\nLogged using handler metric\nTrue\nFPR --> 0.25\nLogged using handler metric\nTrue\nSPC --> 0.8190476190476191\nLogged using handler metric\nTrue\nPPV --> 0.6825396825396826\nLogged using handler metric\nTrue\nACC --> 0.7773584905660377\nLogged using handler metric\nTrue\nFNR --> 0.18095238095238095\n"}]},"apps":[],"jobName":"paragraph_1539663694301_-1154282546","id":"20180723-204822_1932345910","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:226"},{"text":"%spark.pyspark\n","user":"splice","dateUpdated":"2018-10-16T04:21:34+0000","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1539663694301_1851552329","id":"20180723-210300_384483748","dateCreated":"2018-10-16T04:21:34+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:227"}],"name":"Machine Learning Lifecycle Notebook","id":"2DTZHZS4C","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"splicemachine:shared_process":[],"angular:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}